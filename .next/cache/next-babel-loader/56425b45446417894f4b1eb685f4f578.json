{"ast":null,"code":"import User1 from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\nimport formidable from 'formidable';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\n\nconst getHashedPassword = password => {\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(password).digest('base64');\n  return hash;\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  });\n  var validatedusername, validatedemail, validatedpassword;\n  var errors = [];\n  await dbConnect();\n  var formfields = await new Promise((resolve, reject) => form.parse(req, (err, fields, files) => {\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    }\n    /*  username = fields.username;\n          email = feilds.email;\n          password = fields.password;*/\n\n\n    resolve(fields);\n  })); // validator text\n\n  if (validator.isEmpty(validator.trim(formfields.username))) {\n    errors.push(' The username is empty');\n  } else {\n    validatedusername = validator.escape(validator.trim(formfields.username));\n  }\n\n  if (validator.isEmpty(validator.trim(formfields.email))) {\n    errors.push(' The email is empty');\n  } else {\n    if (validator.isEmail(validator.trim(formfields.email))) {\n      validatedemail = validator.escape(validator.trim(formfields.email));\n    } else {\n      errors.push('The email format is incorrect');\n    }\n  }\n\n  if (validator.isEmpty(validator.trim(formfields.password))) {\n    errors.push(' The password is empty');\n  } else {\n    if (validator.isLength(validator.trim(formfields.password), {\n      min: 6\n    })) {\n      validatedpassword = validator.escape(validator.trim(formfields.password));\n    } else {\n      errors.push(' The password must be at least 6 charactors.');\n    }\n  }\n\n  if (validator.trim(formfields.confirmPassword) !== validator.trim(formfields.password)) {\n    errors.push('Password confirmation does not match password.');\n  }\n\n  await User1.findOne({\n    email: validator.trim(formfields.email)\n  }).then(user => {\n    if (user) errors.push('Email already in use');\n  });\n\n  if (errors.length > 0) {\n    console.log(' errors:', errors);\n    res.status(500).json({\n      error: errors,\n      status: 500\n    });\n    res.end();\n    return;\n  }\n\n  const hashedPassword = getHashedPassword(validatedpassword);\n  var user = new User1({\n    username: validatedusername,\n    email: validatedemail,\n    password: hashedPassword\n  });\n  user.save(function (err, user) {\n    if (err) {\n      res.status(500).json({\n        status: 500,\n        error: err\n      });\n      res.end();\n    } else {\n      console.log('user: ', user); // Successful - redirect to login.\n\n      res.status(201).json({\n        status: 201,\n        data: user\n      });\n      res.end();\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_register_post.js"],"names":["User1","dbConnect","crypto","formidable","validator","config","api","externalResolver","bodyParser","getHashedPassword","password","sha256","createHash","hash","update","digest","handler","req","res","form","multiples","validatedusername","validatedemail","validatedpassword","errors","formfields","Promise","resolve","reject","parse","err","fields","files","console","log","json","isEmpty","trim","username","push","escape","email","isEmail","isLength","min","confirmPassword","findOne","then","user","length","status","error","end","hashedPassword","save","data"],"mappings":"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","sourcesContent":["import User1 from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\n\nimport formidable from 'formidable';\n\nimport validator from 'validator';\n\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false,\n  },\n};\n\nconst getHashedPassword = (password) => {\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(password).digest('base64');\n  return hash;\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({ multiples: true });\n\n  var validatedusername, validatedemail, validatedpassword;\n  var errors = [];\n  await dbConnect();\n\n  var formfields = await new Promise((resolve, reject) =>\n    form.parse(req, (err, fields, files) => {\n      if (err) {\n        console.log('err: ', err);\n        res.json(err);\n        return;\n      }\n      /*  username = fields.username;\n            email = feilds.email;\n            password = fields.password;*/\n      resolve(fields);\n    })\n  );\n\n  // validator text\n  if (validator.isEmpty(validator.trim(formfields.username))) {\n    errors.push(' The username is empty');\n  } else {\n    validatedusername = validator.escape(validator.trim(formfields.username));\n  }\n\n  if (validator.isEmpty(validator.trim(formfields.email))) {\n    errors.push(' The email is empty');\n  } else {\n    if (validator.isEmail(validator.trim(formfields.email))) {\n      validatedemail = validator.escape(validator.trim(formfields.email));\n    } else {\n      errors.push('The email format is incorrect');\n    }\n  }\n\n  if (validator.isEmpty(validator.trim(formfields.password))) {\n    errors.push(' The password is empty');\n  } else {\n    if (\n      validator.isLength(validator.trim(formfields.password), {\n        min: 6,\n      })\n    ) {\n      validatedpassword = validator.escape(validator.trim(formfields.password));\n    } else {\n      errors.push(' The password must be at least 6 charactors.');\n    }\n  }\n\n  if (\n    validator.trim(formfields.confirmPassword) !==\n    validator.trim(formfields.password)\n  ) {\n    errors.push('Password confirmation does not match password.');\n  }\n\n  await User1.findOne({ email: validator.trim(formfields.email) }).then(\n    (user) => {\n      if (user) errors.push('Email already in use');\n    }\n  );\n\n  if (errors.length > 0) {\n    console.log(' errors:', errors);\n    res.status(500).json({ error: errors, status: 500 });\n    res.end();\n    return;\n  }\n\n  const hashedPassword = getHashedPassword(validatedpassword);\n  var user = new User1({\n    username: validatedusername,\n    email: validatedemail,\n    password: hashedPassword,\n  });\n\n  user.save(function (err, user) {\n    if (err) {\n      res.status(500).json({ status: 500, error: err });\n      res.end();\n    } else {\n      console.log('user: ', user);\n      // Successful - redirect to login.\n      res.status(201).json({ status: 201, data: user });\n      res.end();\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}