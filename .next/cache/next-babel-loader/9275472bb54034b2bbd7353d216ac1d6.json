{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\n\nconst validationResult = (field, fn1, op1, feedback) => {\n  console.log('field: ', field);\n  console.log('fn1: ', fn1);\n  console.log('op1: ', op1);\n  console.log('feedback: ', feedback);\n  var a = fn1(validator.trim(field), op1);\n\n  if (a) {\n    return validator.escape(a);\n  } else {\n    return new Error(feedback);\n  }\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  });\n  var filearray = [];\n  var text, insid;\n  await dbConnect();\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      res.json(err);\n      return;\n    }\n\n    text = fields.textarea;\n    insid = fields.insid; // validator text\n\n    validationResult(text, validator.isLength, {\n      min: 15,\n      max: 500\n    }, 'The input should be 15 - 500 length');\n    return res.status(201).json({\n      data: validationResult()\n    }); // fields.textarea -> send to comment\n\n    var oldPath, newPath;\n\n    if (files.commentattach.length) {\n      // var filestodb = [];\n      for (let i = 0; i < files.commentattach.length; i++) {\n        oldPath = files.commentattach[i].path;\n        newPath = 'uploadsnew/' + files.commentattach[i].name;\n        fs.renameSync(oldPath, newPath);\n        console.log('Successfully renamed - AKA moved!');\n        filearray.push(newPath); //file to db;\n      }\n\n      console.log('filearray : ', filearray);\n    } else {\n      oldPath = files.commentattach.path;\n      newPath = 'uploadsnew/' + files.commentattach.name;\n      fs.renameSync(oldPath, newPath);\n      console.log('Successfully renamed - AKA moved!');\n      filearray.push(newPath); //file to db\n    }\n\n    ItemInstance.findByIdAndUpdate(insid, {\n      commenttext: text,\n      commentimage: filearray\n    }).then(items_comment => {\n      console.log('I am here after update comment: ', items_comment);\n      res.status(201).json({\n        data: items_comment\n      });\n      res.end();\n    }).catch(err => {\n      console.log('I am in err: ', err);\n      res.status(500).json({\n        error: err\n      });\n      res.end();\n    });\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_comment_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","validator","config","api","externalResolver","bodyParser","validationResult","field","fn1","op1","feedback","console","log","a","trim","escape","Error","handler","req","res","form","multiples","filearray","text","insid","parse","err","fields","files","json","textarea","isLength","min","max","status","data","oldPath","newPath","commentattach","length","i","path","name","renameSync","push","findByIdAndUpdate","commenttext","commentimage","then","items_comment","end","catch","error"],"mappings":"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","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nconst validationResult = (field, fn1, op1, feedback) => {\n    console.log('field: ', field);\n    console.log('fn1: ', fn1);\n    console.log('op1: ', op1);\n    console.log('feedback: ', feedback);\n    var a = fn1(validator.trim(field), op1);\n    if (a) {\n        return validator.escape(a);\n    } else {\n        return new Error(feedback);\n    }\n};\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    var filearray = [];\n    var text, insid;\n\n    await dbConnect();\n\n    form.parse(req, (err, fields, files) => {\n        if (err) {\n            res.json(err);\n            return;\n        }\n\n        text = fields.textarea;\n        insid = fields.insid;\n        // validator text\n\n        validationResult(\n            text,\n            validator.isLength,\n            { min: 15, max: 500 },\n            'The input should be 15 - 500 length'\n        );\n\n        return res.status(201).json({ data: validationResult() });\n        // fields.textarea -> send to comment\n        var oldPath, newPath;\n        if (files.commentattach.length) {\n            // var filestodb = [];\n            for (let i = 0; i < files.commentattach.length; i++) {\n                oldPath = files.commentattach[i].path;\n                newPath = 'uploadsnew/' + files.commentattach[i].name;\n\n                fs.renameSync(oldPath, newPath);\n                console.log('Successfully renamed - AKA moved!');\n                filearray.push(newPath); //file to db;\n            }\n            console.log('filearray : ', filearray);\n        } else {\n            oldPath = files.commentattach.path;\n            newPath = 'uploadsnew/' + files.commentattach.name;\n            fs.renameSync(oldPath, newPath);\n            console.log('Successfully renamed - AKA moved!');\n            filearray.push(newPath); //file to db\n        }\n\n        ItemInstance.findByIdAndUpdate(insid, {\n            commenttext: text,\n            commentimage: filearray,\n        })\n            .then((items_comment) => {\n                console.log('I am here after update comment: ', items_comment);\n                res.status(201).json({ data: items_comment });\n                res.end();\n            })\n            .catch((err) => {\n                console.log('I am in err: ', err);\n                res.status(500).json({ error: err });\n                res.end();\n            });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}