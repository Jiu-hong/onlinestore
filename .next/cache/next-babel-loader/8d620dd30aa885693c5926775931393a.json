{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/contexts/CartContext.js\";\nimport React, { createContext, useContext, useReducer } from 'react';\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartContextActionC = /*#__PURE__*/createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREASE':\n      {\n        fetch('/api/user_addtocart_post', {\n          method: 'post',\n          body: JSON.stringify({\n            count: 1,\n            itemid: action.payload._id,\n            user: action.user\n          })\n        }).then(response => response.json()).then(data => {\n          console.log('data: ', data);\n        });\n        return state + 1;\n      }\n\n    case 'DECREASE':\n      return state - 1;\n\n    case 'INCREASE_BY':\n      return JSON.parse(JSON.stringify(action.payload));\n\n    default:\n      throw new Error(`Unknown action: ${action.type}`);\n  }\n};\n\nconst CartContextProvider = ({\n  children\n}) => {\n  const {\n    0: len,\n    1: dispatch\n  } = useReducer(reducer, 0);\n  const [instances, setInstance] = useState('');\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      len,\n      instances\n    },\n    children: /*#__PURE__*/_jsxDEV(CartContextActionC.Provider, {\n      value: {\n        dispatch,\n        setInstance\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\nexport const useInslength = () => useContext(CartContext);\nexport const useInslenDispatch = () => useContext(CartContextActionC);\nexport default CartContextProvider;","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/contexts/CartContext.js"],"names":["React","createContext","useContext","useReducer","CartContext","CartContextActionC","reducer","state","action","type","fetch","method","body","JSON","stringify","count","itemid","payload","_id","user","then","response","json","data","console","log","parse","Error","CartContextProvider","children","len","dispatch","instances","setInstance","useState","useInslength","useInslenDispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D;AAEA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,EAAjC;AACP,OAAO,MAAMI,kBAAkB,gBAAGJ,aAAa,EAAxC;;AAEP,MAAMK,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AAAiB;AACfC,QAAAA,KAAK,CAAC,0BAAD,EAA6B;AAChCC,UAAAA,MAAM,EAAE,MADwB;AAEhCC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,YAAAA,KAAK,EAAE,CADY;AAEnBC,YAAAA,MAAM,EAAER,MAAM,CAACS,OAAP,CAAeC,GAFJ;AAGnBC,YAAAA,IAAI,EAAEX,MAAM,CAACW;AAHM,WAAf;AAF0B,SAA7B,CAAL,CAQGC,IARH,CAQSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARtB,EASGF,IATH,CASSG,IAAD,IAAU;AACdC,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AACD,SAXH;AAYA,eAAOhB,KAAK,GAAG,CAAf;AACD;;AAED,SAAK,UAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF,SAAK,aAAL;AACE,aAAOM,IAAI,CAACa,KAAL,CAAWb,IAAI,CAACC,SAAL,CAAeN,MAAM,CAACS,OAAtB,CAAX,CAAP;;AACF;AACE,YAAM,IAAIU,KAAJ,CAAW,mBAAkBnB,MAAM,CAACC,IAAK,EAAzC,CAAN;AAtBJ;AAwBD,CAzBD;;AA2BA,MAAMmB,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAkB5B,UAAU,CAACG,OAAD,EAAU,CAAV,CAAlC;AACA,QAAM,CAAC0B,SAAD,EAAYC,WAAZ,IAA2BC,QAAQ,CAAC,EAAD,CAAzC;AACA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,GAAF;AAAOE,MAAAA;AAAP,KAA7B;AAAA,2BACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,MAAA,KAAK,EAAE;AAAED,QAAAA,QAAF;AAAYE,QAAAA;AAAZ,OAApC;AAAA,gBACGJ;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAVD;;AAYA,OAAO,MAAMM,YAAY,GAAG,MAAMjC,UAAU,CAACE,WAAD,CAArC;AACP,OAAO,MAAMgC,iBAAiB,GAAG,MAAMlC,UAAU,CAACG,kBAAD,CAA1C;AACP,eAAeuB,mBAAf","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\n\nexport const CartContext = createContext();\nexport const CartContextActionC = createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREASE': {\n      fetch('/api/user_addtocart_post', {\n        method: 'post',\n        body: JSON.stringify({\n          count: 1,\n          itemid: action.payload._id,\n          user: action.user,\n        }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log('data: ', data);\n        });\n      return state + 1;\n    }\n\n    case 'DECREASE':\n      return state - 1;\n    case 'INCREASE_BY':\n      return JSON.parse(JSON.stringify(action.payload));\n    default:\n      throw new Error(`Unknown action: ${action.type}`);\n  }\n};\n\nconst CartContextProvider = ({ children }) => {\n  const [len, dispatch] = useReducer(reducer, 0);\n  const [instances, setInstance] = useState('');\n  return (\n    <CartContext.Provider value={{ len, instances }}>\n      <CartContextActionC.Provider value={{ dispatch, setInstance }}>\n        {children}\n      </CartContextActionC.Provider>\n    </CartContext.Provider>\n  );\n};\n\nexport const useInslength = () => useContext(CartContext);\nexport const useInslenDispatch = () => useContext(CartContextActionC);\nexport default CartContextProvider;\n"]},"metadata":{},"sourceType":"module"}