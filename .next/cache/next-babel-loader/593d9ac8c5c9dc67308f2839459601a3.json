{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  }); // console.log('req.body: ', req.body);\n\n  form.parse(req, (err, fields, files) => {\n    console.log('I am in form parse');\n\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    }\n\n    console.log('req.body.email: ', fields.email);\n    console.log('req.body.password: ', fields.password);\n  });\n  var validatedtext, validatedinsid;\n  var errors = [];\n  await dbConnect(); // validator text\n\n  if (validator.isEmpty(validator.trim(fields.email))) {\n    errors.push(' The email is empty');\n  } else {\n    if (validator.isEmail(validator.trim(fields.email))) {\n      validatedinsid = validator.escape(validator.trim(insid));\n    } else {\n      errors.push(' The email format is incorrect');\n    }\n  }\n\n  if (errors.length > 0) {\n    res.status(500).json({\n      error: errors,\n      status: 500\n    });\n    res.end();\n    return;\n  }\n  /*\n  ItemInstance.findByIdAndUpdate(validatedinsid, {\n      commenttext: validatedtext,\n      commentimage: filearray,\n  })\n      .populate('item')\n      .then((items_comment) => {\n          res.status(201).json({ status: 201, data: items_comment });\n          res.end();\n      })\n      .catch((err) => {\n          res.status(500).json({ status: 500, error: err });\n          res.end();\n      });*/\n\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_logon_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","validator","config","api","externalResolver","bodyParser","handler","req","res","form","multiples","parse","err","fields","files","console","log","json","email","password","validatedtext","validatedinsid","errors","isEmpty","trim","push","isEmail","escape","insid","length","status","error","end"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE,IADjB;AAEDC,IAAAA,UAAU,EAAE;AAFX;AADa,CAAf;AAOP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,QAAMC,IAAI,GAAGV,UAAU,CAAC;AAAEW,IAAAA,SAAS,EAAE;AAAb,GAAD,CAAvB,CAD4C,CAE5C;;AAEAD,EAAAA,IAAI,CAACE,KAAL,CAAWJ,GAAX,EAAgB,CAACK,GAAD,EAAMC,MAAN,EAAcC,KAAd,KAAwB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AACA,QAAIJ,GAAJ,EAAS;AACLG,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,GAArB;AACAJ,MAAAA,GAAG,CAACS,IAAJ,CAASL,GAAT;AACA;AACH;;AAEDG,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,MAAM,CAACK,KAAvC;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,MAAM,CAACM,QAA1C;AACH,GAVD;AAYA,MAAIC,aAAJ,EAAmBC,cAAnB;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMxB,SAAS,EAAf,CAlB4C,CAoB5C;;AAEA,MAAIG,SAAS,CAACsB,OAAV,CAAkBtB,SAAS,CAACuB,IAAV,CAAeX,MAAM,CAACK,KAAtB,CAAlB,CAAJ,EAAqD;AACjDI,IAAAA,MAAM,CAACG,IAAP,CAAY,qBAAZ;AACH,GAFD,MAEO;AACH,QAAIxB,SAAS,CAACyB,OAAV,CAAkBzB,SAAS,CAACuB,IAAV,CAAeX,MAAM,CAACK,KAAtB,CAAlB,CAAJ,EAAqD;AACjDG,MAAAA,cAAc,GAAGpB,SAAS,CAAC0B,MAAV,CAAiB1B,SAAS,CAACuB,IAAV,CAAeI,KAAf,CAAjB,CAAjB;AACH,KAFD,MAEO;AACHN,MAAAA,MAAM,CAACG,IAAP,CAAY,gCAAZ;AACH;AACJ;;AAED,MAAIH,MAAM,CAACO,MAAP,GAAgB,CAApB,EAAuB;AACnBrB,IAAAA,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AAAEc,MAAAA,KAAK,EAAET,MAAT;AAAiBQ,MAAAA,MAAM,EAAE;AAAzB,KAArB;AACAtB,IAAAA,GAAG,CAACwB,GAAJ;AACA;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    // console.log('req.body: ', req.body);\n\n    form.parse(req, (err, fields, files) => {\n        console.log('I am in form parse');\n        if (err) {\n            console.log('err: ', err);\n            res.json(err);\n            return;\n        }\n\n        console.log('req.body.email: ', fields.email);\n        console.log('req.body.password: ', fields.password);\n    });\n\n    var validatedtext, validatedinsid;\n    var errors = [];\n    await dbConnect();\n\n    // validator text\n\n    if (validator.isEmpty(validator.trim(fields.email))) {\n        errors.push(' The email is empty');\n    } else {\n        if (validator.isEmail(validator.trim(fields.email))) {\n            validatedinsid = validator.escape(validator.trim(insid));\n        } else {\n            errors.push(' The email format is incorrect');\n        }\n    }\n\n    if (errors.length > 0) {\n        res.status(500).json({ error: errors, status: 500 });\n        res.end();\n        return;\n    }\n    /*\n    ItemInstance.findByIdAndUpdate(validatedinsid, {\n        commenttext: validatedtext,\n        commentimage: filearray,\n    })\n        .populate('item')\n        .then((items_comment) => {\n            res.status(201).json({ status: 201, data: items_comment });\n            res.end();\n        })\n        .catch((err) => {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        });*/\n}\n"]},"metadata":{},"sourceType":"module"}