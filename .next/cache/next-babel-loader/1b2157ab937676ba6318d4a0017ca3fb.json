{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport { IncomingForm } from 'formidable';\nimport { promises as fs } from 'fs';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\nexport default async function handler(req, res) {\n  var _data$files;\n\n  // parse form with a Promise wrapper\n  const data = await new Promise((resolve, reject) => {\n    const form = new IncomingForm();\n    form.parse(req, (err, fields, files) => {\n      if (err) return reject(err);\n      resolve({\n        fields,\n        files\n      });\n    });\n  }); // read file from the temporary path\n\n  const contents = await fs.readFile(data === null || data === void 0 ? void 0 : (_data$files = data.files) === null || _data$files === void 0 ? void 0 : _data$files.nameOfTheInput.path, {\n    encoding: 'utf8'\n  }); //  var file = req\n  //  req.body = JSON.parse(req.body);\n\n  /*   const data = new Uint8Array(Buffer.from(req.body.file));\n   fs.writeFile('message.txt', data, (err) => {\n      if (err) throw err;\n      console.log('The file has been saved!');\n  });*/\n\n  /* await dbConnect();\n  ItemInstance.findByIdAndUpdate(req.body.id, { comment: req.body.comment })\n      .then((items_comment) => {\n          console.log('I am here after update comment: ', res);\n          res.status(201).json({ data: items_comment });\n          res.end();\n      })\n      .catch((err) => {\n          console.log('I am in err: ', err);\n          res.status(500).json({ error: err });\n          res.end();\n      });*/\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_comment_post.js"],"names":["ItemInstance","dbConnect","IncomingForm","promises","fs","config","api","externalResolver","bodyParser","handler","req","res","data","Promise","resolve","reject","form","parse","err","fields","files","contents","readFile","nameOfTheInput","path","encoding"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,QAAQ,IAAIC,EAArB,QAA+B,IAA/B;AACA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE,IADjB;AAEDC,IAAAA,UAAU,EAAE;AAFX;AADa,CAAf;AAOP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAAA;;AAC5C;AACA,QAAMC,IAAI,GAAG,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAChD,UAAMC,IAAI,GAAG,IAAId,YAAJ,EAAb;AAEAc,IAAAA,IAAI,CAACC,KAAL,CAAWP,GAAX,EAAgB,CAACQ,GAAD,EAAMC,MAAN,EAAcC,KAAd,KAAwB;AACpC,UAAIF,GAAJ,EAAS,OAAOH,MAAM,CAACG,GAAD,CAAb;AACTJ,MAAAA,OAAO,CAAC;AAAEK,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAD,CAAP;AACH,KAHD;AAIH,GAPkB,CAAnB,CAF4C,CAW5C;;AACA,QAAMC,QAAQ,GAAG,MAAMjB,EAAE,CAACkB,QAAH,CAAYV,IAAZ,aAAYA,IAAZ,sCAAYA,IAAI,CAAEQ,KAAlB,gDAAY,YAAaG,cAAb,CAA4BC,IAAxC,EAA8C;AACjEC,IAAAA,QAAQ,EAAE;AADuD,GAA9C,CAAvB,CAZ4C,CAgB5C;AACA;;AAEA;AACJ;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport { IncomingForm } from 'formidable';\nimport { promises as fs } from 'fs';\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nexport default async function handler(req, res) {\n    // parse form with a Promise wrapper\n    const data = await new Promise((resolve, reject) => {\n        const form = new IncomingForm();\n\n        form.parse(req, (err, fields, files) => {\n            if (err) return reject(err);\n            resolve({ fields, files });\n        });\n    });\n\n    // read file from the temporary path\n    const contents = await fs.readFile(data?.files?.nameOfTheInput.path, {\n        encoding: 'utf8',\n    });\n\n    //  var file = req\n    //  req.body = JSON.parse(req.body);\n\n    /*   const data = new Uint8Array(Buffer.from(req.body.file));\n\n    fs.writeFile('message.txt', data, (err) => {\n        if (err) throw err;\n        console.log('The file has been saved!');\n    });*/\n\n    /* await dbConnect();\n    ItemInstance.findByIdAndUpdate(req.body.id, { comment: req.body.comment })\n        .then((items_comment) => {\n            console.log('I am here after update comment: ', res);\n            res.status(201).json({ data: items_comment });\n            res.end();\n        })\n        .catch((err) => {\n            console.log('I am in err: ', err);\n            res.status(500).json({ error: err });\n            res.end();\n        });*/\n}\n"]},"metadata":{},"sourceType":"module"}