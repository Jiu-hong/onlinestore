{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\nimport formidable from 'formidable';\nimport fs from 'fs';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\n\nconst getHashedPassword = password => {\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(password).digest('base64');\n  return hash;\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  }); // console.log('req.body: ', req.body);\n\n  form.parse(req, (err, fields, files) => {\n    console.log('I am in form parse');\n\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    }\n\n    console.log('req.body.email: ', fields.email);\n    console.log('req.body.password: ', fields.password);\n  });\n  var validatedemail, validatedpassword;\n  var errors = [];\n  await dbConnect(); // validator text\n\n  if (validator.isEmpty(validator.trim(fields.email))) {\n    errors.push(' The email is empty');\n  } else {\n    if (validator.isEmail(validator.trim(fields.email))) {\n      validatedemail = validator.escape(validator.trim(fields.email));\n    } else {\n      errors.push(' The email format is incorrect');\n    }\n  }\n\n  if (validator.isEmpty(validator.trim(fields.password))) {\n    errors.push(' The password is empty');\n  } else {\n    if (validator.isLength(validator.trim(password), {\n      min: 6\n    })) {\n      validatedpassword = validator.escape(validator.trim(password));\n    } else {\n      errors.push(' The password must be at least 6 charactors.');\n    }\n  }\n\n  if (errors.length > 0) {\n    res.status(500).json({\n      error: errors,\n      status: 500\n    });\n    res.end();\n    return;\n  }\n\n  const hashedPassword = getHashedPassword(validatedpassword);\n  User.findOne({\n    email: validatedemail,\n    password: hashedPassword\n  }).then(user => {\n    if (!user) {\n      var err = new Error('Invalid username or password');\n      res.status(404).json({\n        status: 404,\n        error: err\n      });\n      res.end();\n    } else {\n      res.status(201).json({\n        status: 201,\n        data: user\n      });\n      res.end();\n    }\n  }).catch(err => {\n    res.status(500).json({\n      status: 500,\n      error: err\n    });\n    res.end();\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_logon_post.js"],"names":["ItemInstance","dbConnect","crypto","formidable","fs","validator","config","api","externalResolver","bodyParser","getHashedPassword","password","sha256","createHash","hash","update","digest","handler","req","res","form","multiples","parse","err","fields","files","console","log","json","email","validatedemail","validatedpassword","errors","isEmpty","trim","push","isEmail","escape","isLength","min","length","status","error","end","hashedPassword","User","findOne","then","user","Error","data","catch"],"mappings":"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","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nconst getHashedPassword = (password) => {\n    const sha256 = crypto.createHash('sha256');\n    const hash = sha256.update(password).digest('base64');\n    return hash;\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    // console.log('req.body: ', req.body);\n\n    form.parse(req, (err, fields, files) => {\n        console.log('I am in form parse');\n        if (err) {\n            console.log('err: ', err);\n            res.json(err);\n            return;\n        }\n\n        console.log('req.body.email: ', fields.email);\n        console.log('req.body.password: ', fields.password);\n    });\n\n    var validatedemail, validatedpassword;\n    var errors = [];\n    await dbConnect();\n\n    // validator text\n\n    if (validator.isEmpty(validator.trim(fields.email))) {\n        errors.push(' The email is empty');\n    } else {\n        if (validator.isEmail(validator.trim(fields.email))) {\n            validatedemail = validator.escape(validator.trim(fields.email));\n        } else {\n            errors.push(' The email format is incorrect');\n        }\n    }\n\n    if (validator.isEmpty(validator.trim(fields.password))) {\n        errors.push(' The password is empty');\n    } else {\n        if (validator.isLength(validator.trim(password), { min: 6 })) {\n            validatedpassword = validator.escape(validator.trim(password));\n        } else {\n            errors.push(' The password must be at least 6 charactors.');\n        }\n    }\n\n    if (errors.length > 0) {\n        res.status(500).json({ error: errors, status: 500 });\n        res.end();\n        return;\n    }\n    const hashedPassword = getHashedPassword(validatedpassword);\n    User.findOne({ email: validatedemail, password: hashedPassword })\n        .then((user) => {\n            if (!user) {\n                var err = new Error('Invalid username or password');\n                res.status(404).json({ status: 404, error: err });\n                res.end();\n            } else {\n                res.status(201).json({ status: 201, data: user });\n                res.end();\n            }\n        })\n        .catch((err) => {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        });\n}\n"]},"metadata":{},"sourceType":"module"}