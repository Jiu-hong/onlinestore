{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nexport const config = {\n  api: {\n    externalResolver: true\n  }\n};\nexport default async function handler(req, res) {\n  req.body = JSON.parse(req.body);\n  console.log('req.body: ', req.body);\n  await dbConnect();\n  var newins; //https://stackoverflow.com/questions/38439748/best-way-of-chaining-mongoose-queries\n\n  ItemInstance.findOneAndUpdate({\n    user: req.body.user,\n    status: 'Cart',\n    item: req.body.itemid\n  }, {\n    $inc: {\n      quantity: req.body.count\n    },\n    buy_date: Date.now(),\n    check: true\n  }).populate('item').then(res => {\n    // newins = res;\n    if (res == null) {\n      var iteminstance = new ItemInstance({\n        item: req.body.itemid,\n        user: req.body.user,\n        status: 'Cart',\n        quantity: req.body.count\n      });\n      return new Promise((res, rej) => {\n        iteminstance.save(function (error, new_item) {\n          new_item.populate('item', function (err, newitemafterpopulate) {\n            return res(newitemafterpopulate);\n          });\n        });\n      });\n    } else {\n      return res;\n    }\n  }).then(newins => {\n    console.log('newins here: ', newins);\n    res.status(201).json({\n      data: newins\n    });\n    res.end();\n    /*  return ItemInstance.find({\n        user: req.body.user,\n        status: 'Cart',\n    }).populate('item');*/\n  }).catch(err => {\n    res.status(500).json({\n      error: err\n    });\n    res.end();\n  });\n  /*\n  await ItemInstance.findOneAndUpdate(\n  { user: req.body.user, status: 'Cart', item: req.body.itemid },\n  { $inc: { quantity: req.body.count }, buy_date: Date.now(), check: true }\n  ).exec(function (err, items_cart) {\n  if (err) {\n    res.send('err');\n    console.log('err: ', err);\n    res.end();\n    return new Error(err);\n  } else if (items_cart == null) {\n    var iteminstance = new ItemInstance({\n      item: req.body.itemid,\n      user: req.body.user,\n      quantity: req.body.count,\n    });\n    iteminstance.save(function (err) {\n      if (err) {\n        return new Error(err);\n      }\n      console.log('add new instance to itemInstance');\n    });\n  } else {\n    // Successful - redirect to new record.\n    console.log('update exist itemInstance');\n  }\n  });\n  ItemInstance.find({ user: req.body.user, status: 'Cart' })\n  .populate('item')\n  .exec(function (err, items_carts) {\n    if (err) {\n      res.send('err');\n      console.log('err: ', err);\n      res.end();\n      return new Error(err);\n    } else {\n      // Successful.\n      console.log('find exist itemInstance');\n       res.status(201).json({ data: items_carts });\n      res.end();\n    }\n  });*/\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_addtocart_post.js"],"names":["ItemInstance","dbConnect","config","api","externalResolver","handler","req","res","body","JSON","parse","console","log","newins","findOneAndUpdate","user","status","item","itemid","$inc","quantity","count","buy_date","Date","now","check","populate","then","iteminstance","Promise","rej","save","error","new_item","err","newitemafterpopulate","json","data","end","catch"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE;AADjB;AADa,CAAf;AAMP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5CD,EAAAA,GAAG,CAACE,IAAJ,GAAWC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACE,IAAf,CAAX;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,GAAG,CAACE,IAA9B;AACA,QAAMP,SAAS,EAAf;AACA,MAAIY,MAAJ,CAJ4C,CAK5C;;AACAb,EAAAA,YAAY,CAACc,gBAAb,CACI;AAAEC,IAAAA,IAAI,EAAET,GAAG,CAACE,IAAJ,CAASO,IAAjB;AAAuBC,IAAAA,MAAM,EAAE,MAA/B;AAAuCC,IAAAA,IAAI,EAAEX,GAAG,CAACE,IAAJ,CAASU;AAAtD,GADJ,EAEI;AACIC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAEd,GAAG,CAACE,IAAJ,CAASa;AAArB,KADV;AAEIC,IAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL,EAFd;AAGIC,IAAAA,KAAK,EAAE;AAHX,GAFJ,EAQKC,QARL,CAQc,MARd,EASKC,IATL,CASWpB,GAAD,IAAS;AACX;AACA,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACb,UAAIqB,YAAY,GAAG,IAAI5B,YAAJ,CAAiB;AAChCiB,QAAAA,IAAI,EAAEX,GAAG,CAACE,IAAJ,CAASU,MADiB;AAEhCH,QAAAA,IAAI,EAAET,GAAG,CAACE,IAAJ,CAASO,IAFiB;AAGhCC,QAAAA,MAAM,EAAE,MAHwB;AAIhCI,QAAAA,QAAQ,EAAEd,GAAG,CAACE,IAAJ,CAASa;AAJa,OAAjB,CAAnB;AAOA,aAAO,IAAIQ,OAAJ,CAAY,CAACtB,GAAD,EAAMuB,GAAN,KAAc;AAC7BF,QAAAA,YAAY,CAACG,IAAb,CAAkB,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AACzCA,UAAAA,QAAQ,CAACP,QAAT,CACI,MADJ,EAEI,UAAUQ,GAAV,EAAeC,oBAAf,EAAqC;AACjC,mBAAO5B,GAAG,CAAC4B,oBAAD,CAAV;AACH,WAJL;AAMH,SAPD;AAQH,OATM,CAAP;AAUH,KAlBD,MAkBO;AACH,aAAO5B,GAAP;AACH;AACJ,GAhCL,EAiCKoB,IAjCL,CAiCWd,MAAD,IAAY;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,MAA7B;AACAN,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBoB,IAAhB,CAAqB;AAAEC,MAAAA,IAAI,EAAExB;AAAR,KAArB;AACAN,IAAAA,GAAG,CAAC+B,GAAJ;AACA;AACZ;AACA;AACA;AACS,GAzCL,EA0CKC,KA1CL,CA0CYL,GAAD,IAAS;AACZ3B,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBoB,IAAhB,CAAqB;AAAEJ,MAAAA,KAAK,EAAEE;AAAT,KAArB;AACA3B,IAAAA,GAAG,CAAC+B,GAAJ;AACH,GA7CL;AA8CA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n    },\n};\n\nexport default async function handler(req, res) {\n    req.body = JSON.parse(req.body);\n    console.log('req.body: ', req.body);\n    await dbConnect();\n    var newins;\n    //https://stackoverflow.com/questions/38439748/best-way-of-chaining-mongoose-queries\n    ItemInstance.findOneAndUpdate(\n        { user: req.body.user, status: 'Cart', item: req.body.itemid },\n        {\n            $inc: { quantity: req.body.count },\n            buy_date: Date.now(),\n            check: true,\n        }\n    )\n        .populate('item')\n        .then((res) => {\n            // newins = res;\n            if (res == null) {\n                var iteminstance = new ItemInstance({\n                    item: req.body.itemid,\n                    user: req.body.user,\n                    status: 'Cart',\n                    quantity: req.body.count,\n                });\n\n                return new Promise((res, rej) => {\n                    iteminstance.save(function (error, new_item) {\n                        new_item.populate(\n                            'item',\n                            function (err, newitemafterpopulate) {\n                                return res(newitemafterpopulate);\n                            }\n                        );\n                    });\n                });\n            } else {\n                return res;\n            }\n        })\n        .then((newins) => {\n            console.log('newins here: ', newins);\n            res.status(201).json({ data: newins });\n            res.end();\n            /*  return ItemInstance.find({\n                user: req.body.user,\n                status: 'Cart',\n            }).populate('item');*/\n        })\n        .catch((err) => {\n            res.status(500).json({ error: err });\n            res.end();\n        });\n    /*\n  await ItemInstance.findOneAndUpdate(\n    { user: req.body.user, status: 'Cart', item: req.body.itemid },\n    { $inc: { quantity: req.body.count }, buy_date: Date.now(), check: true }\n  ).exec(function (err, items_cart) {\n    if (err) {\n      res.send('err');\n      console.log('err: ', err);\n      res.end();\n      return new Error(err);\n    } else if (items_cart == null) {\n      var iteminstance = new ItemInstance({\n        item: req.body.itemid,\n        user: req.body.user,\n        quantity: req.body.count,\n      });\n      iteminstance.save(function (err) {\n        if (err) {\n          return new Error(err);\n        }\n        console.log('add new instance to itemInstance');\n      });\n    } else {\n      // Successful - redirect to new record.\n      console.log('update exist itemInstance');\n    }\n  });\n\n  ItemInstance.find({ user: req.body.user, status: 'Cart' })\n    .populate('item')\n    .exec(function (err, items_carts) {\n      if (err) {\n        res.send('err');\n        console.log('err: ', err);\n        res.end();\n        return new Error(err);\n      } else {\n        // Successful.\n        console.log('find exist itemInstance');\n\n        res.status(201).json({ data: items_carts });\n        res.end();\n      }\n    });*/\n}\n"]},"metadata":{},"sourceType":"module"}