{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport { IncomingForm } from 'formidable';\nimport { promises as fs } from 'fs';\n\nvar multer = require('multer');\n\nvar upload = multer({\n  dest: '/uploadsnew/'\n});\nexport const config = {\n  api: {\n    externalResolver: true // bodyParser: false,\n\n  }\n};\nexport default async function handler(req, res) {\n  upload.single('someExpressFiles'); // parse form with a Promise wrapper\n\n  /*  const data = await new Promise((resolve, reject) => {\n      const form = new IncomingForm();\n       form.parse(req, (err, fields, files) => {\n          console.log('files: ', files);\n          if (err) return reject(err);\n          resolve({ fields, files });\n      });\n  });\n   // read file from the temporary path\n  const contents = await fs.readFile(data?.files?.nameOfTheInput.path, {\n      encoding: 'utf8',\n  });*/\n  //  var file = req\n  //  req.body = JSON.parse(req.body);\n\n  /*   const data = new Uint8Array(Buffer.from(req.body.file));\n   fs.writeFile('message.txt', data, (err) => {\n      if (err) throw err;\n      console.log('The file has been saved!');\n  });*/\n\n  /* await dbConnect();\n  ItemInstance.findByIdAndUpdate(req.body.id, { comment: req.body.comment })\n      .then((items_comment) => {\n          console.log('I am here after update comment: ', res);\n          res.status(201).json({ data: items_comment });\n          res.end();\n      })\n      .catch((err) => {\n          console.log('I am in err: ', err);\n          res.status(500).json({ error: err });\n          res.end();\n      });*/\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_comment_post.js"],"names":["ItemInstance","dbConnect","IncomingForm","promises","fs","multer","require","upload","dest","config","api","externalResolver","handler","req","res","single"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,QAAQ,IAAIC,EAArB,QAA+B,IAA/B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,MAAM,GAAGF,MAAM,CAAC;AAAEG,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAnB;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE,IADjB,CAED;;AAFC;AADa,CAAf;AAOP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5CP,EAAAA,MAAM,CAACQ,MAAP,CAAc,kBAAd,EAD4C,CAE5C;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGI;AACA;;AACA;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport { IncomingForm } from 'formidable';\nimport { promises as fs } from 'fs';\n\nvar multer = require('multer');\nvar upload = multer({ dest: '/uploadsnew/' });\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        // bodyParser: false,\n    },\n};\n\nexport default async function handler(req, res) {\n    upload.single('someExpressFiles');\n    // parse form with a Promise wrapper\n    /*  const data = await new Promise((resolve, reject) => {\n        const form = new IncomingForm();\n\n        form.parse(req, (err, fields, files) => {\n            console.log('files: ', files);\n            if (err) return reject(err);\n            resolve({ fields, files });\n        });\n    });\n\n    // read file from the temporary path\n    const contents = await fs.readFile(data?.files?.nameOfTheInput.path, {\n        encoding: 'utf8',\n    });*/\n    //  var file = req\n    //  req.body = JSON.parse(req.body);\n    /*   const data = new Uint8Array(Buffer.from(req.body.file));\n\n    fs.writeFile('message.txt', data, (err) => {\n        if (err) throw err;\n        console.log('The file has been saved!');\n    });*/\n    /* await dbConnect();\n    ItemInstance.findByIdAndUpdate(req.body.id, { comment: req.body.comment })\n        .then((items_comment) => {\n            console.log('I am here after update comment: ', res);\n            res.status(201).json({ data: items_comment });\n            res.end();\n        })\n        .catch((err) => {\n            console.log('I am in err: ', err);\n            res.status(500).json({ error: err });\n            res.end();\n        });*/\n}\n"]},"metadata":{},"sourceType":"module"}