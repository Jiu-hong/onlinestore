{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nexport const config = {\n  api: {\n    externalResolver: true\n  }\n};\nexport default async function handler(req, res) {\n  req.body = JSON.parse(req.body);\n  await dbConnect(); //https://stackoverflow.com/questions/38439748/best-way-of-chaining-mongoose-queries\n\n  ItemInstance.findOneAndUpdate({\n    user: req.body.user,\n    status: 'Cart',\n    item: req.body.itemid\n  }, {\n    $inc: {\n      quantity: req.body.count\n    },\n    buy_date: Date.now(),\n    check: true\n  }).then(res => {\n    if (res == null) {\n      var iteminstance = new ItemInstance({\n        item: req.body.itemid,\n        user: req.body.user,\n        status: 'Cart',\n        quantity: req.body.count\n      });\n      return iteminstance.save();\n    }\n  }).then(() => {\n    return ItemInstance.find({\n      user: req.body.user,\n      status: 'Cart'\n    }).populate('item');\n  }).then(item_carts => {\n    res.status(201).json({\n      data: item_carts\n    });\n    res.end();\n  }).catch(err => {\n    res.status(500).json({\n      error: err\n    });\n    res.end();\n  });\n  /*\n     () => {\n            return ItemInstance.find({\n                user: req.body.user,\n                status: 'Cart',\n            }).populate('item');\n  \n  await ItemInstance.findOneAndUpdate(\n    { user: req.body.user, status: 'Cart', item: req.body.itemid },\n    { $inc: { quantity: req.body.count }, buy_date: Date.now(), check: true }\n  ).exec(function (err, items_cart) {\n    if (err) {\n      res.send('err');\n      console.log('err: ', err);\n      res.end();\n      return new Error(err);\n    } else if (items_cart == null) {\n      var iteminstance = new ItemInstance({\n        item: req.body.itemid,\n        user: req.body.user,\n        quantity: req.body.count,\n      });\n      iteminstance.save(function (err) {\n        if (err) {\n          return new Error(err);\n        }\n        console.log('add new instance to itemInstance');\n      });\n    } else {\n      // Successful - redirect to new record.\n      console.log('update exist itemInstance');\n    }\n  });\n   ItemInstance.find({ user: req.body.user, status: 'Cart' })\n    .populate('item')\n    .exec(function (err, items_carts) {\n      if (err) {\n        res.send('err');\n        console.log('err: ', err);\n        res.end();\n        return new Error(err);\n      } else {\n        // Successful.\n        console.log('find exist itemInstance');\n         res.status(201).json({ data: items_carts });\n        res.end();\n      }\n    });*/\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_addtocart_post.js"],"names":["ItemInstance","dbConnect","config","api","externalResolver","handler","req","res","body","JSON","parse","findOneAndUpdate","user","status","item","itemid","$inc","quantity","count","buy_date","Date","now","check","then","iteminstance","save","find","populate","item_carts","json","data","end","catch","err","error"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,gBAAgB,EAAE;AADf;AADe,CAAf;AAMP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9CD,EAAAA,GAAG,CAACE,IAAJ,GAAWC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACE,IAAf,CAAX;AAEA,QAAMP,SAAS,EAAf,CAH8C,CAI9C;;AACAD,EAAAA,YAAY,CAACW,gBAAb,CACE;AAAEC,IAAAA,IAAI,EAAEN,GAAG,CAACE,IAAJ,CAASI,IAAjB;AAAuBC,IAAAA,MAAM,EAAE,MAA/B;AAAuCC,IAAAA,IAAI,EAAER,GAAG,CAACE,IAAJ,CAASO;AAAtD,GADF,EAEE;AACEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAEX,GAAG,CAACE,IAAJ,CAASU;AAArB,KADR;AAEEC,IAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL,EAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GAFF,EAQGC,IARH,CAQShB,GAAD,IAAS;AACb,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,UAAIiB,YAAY,GAAG,IAAIxB,YAAJ,CAAiB;AAClCc,QAAAA,IAAI,EAAER,GAAG,CAACE,IAAJ,CAASO,MADmB;AAElCH,QAAAA,IAAI,EAAEN,GAAG,CAACE,IAAJ,CAASI,IAFmB;AAGlCC,QAAAA,MAAM,EAAE,MAH0B;AAIlCI,QAAAA,QAAQ,EAAEX,GAAG,CAACE,IAAJ,CAASU;AAJe,OAAjB,CAAnB;AAOA,aAAOM,YAAY,CAACC,IAAb,EAAP;AACD;AACF,GAnBH,EAoBGF,IApBH,CAoBQ,MAAM;AACV,WAAOvB,YAAY,CAAC0B,IAAb,CAAkB;AACvBd,MAAAA,IAAI,EAAEN,GAAG,CAACE,IAAJ,CAASI,IADQ;AAEvBC,MAAAA,MAAM,EAAE;AAFe,KAAlB,EAGJc,QAHI,CAGK,MAHL,CAAP;AAID,GAzBH,EA0BGJ,IA1BH,CA0BSK,UAAD,IAAgB;AACpBrB,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB;AAAEC,MAAAA,IAAI,EAAEF;AAAR,KAArB;AACArB,IAAAA,GAAG,CAACwB,GAAJ;AACD,GA7BH,EA8BGC,KA9BH,CA8BUC,GAAD,IAAS;AACd1B,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB;AAAEK,MAAAA,KAAK,EAAED;AAAT,KAArB;AACA1B,IAAAA,GAAG,CAACwB,GAAJ;AACD,GAjCH;AAkCA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMC","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nexport const config = {\n  api: {\n    externalResolver: true,\n  },\n};\n\nexport default async function handler(req, res) {\n  req.body = JSON.parse(req.body);\n\n  await dbConnect();\n  //https://stackoverflow.com/questions/38439748/best-way-of-chaining-mongoose-queries\n  ItemInstance.findOneAndUpdate(\n    { user: req.body.user, status: 'Cart', item: req.body.itemid },\n    {\n      $inc: { quantity: req.body.count },\n      buy_date: Date.now(),\n      check: true,\n    }\n  )\n    .then((res) => {\n      if (res == null) {\n        var iteminstance = new ItemInstance({\n          item: req.body.itemid,\n          user: req.body.user,\n          status: 'Cart',\n          quantity: req.body.count,\n        });\n\n        return iteminstance.save();\n      }\n    })\n    .then(() => {\n      return ItemInstance.find({\n        user: req.body.user,\n        status: 'Cart',\n      }).populate('item');\n    })\n    .then((item_carts) => {\n      res.status(201).json({ data: item_carts });\n      res.end();\n    })\n    .catch((err) => {\n      res.status(500).json({ error: err });\n      res.end();\n    });\n  /*\n\n    () => {\n            return ItemInstance.find({\n                user: req.body.user,\n                status: 'Cart',\n            }).populate('item');\n\n\n\n  await ItemInstance.findOneAndUpdate(\n    { user: req.body.user, status: 'Cart', item: req.body.itemid },\n    { $inc: { quantity: req.body.count }, buy_date: Date.now(), check: true }\n  ).exec(function (err, items_cart) {\n    if (err) {\n      res.send('err');\n      console.log('err: ', err);\n      res.end();\n      return new Error(err);\n    } else if (items_cart == null) {\n      var iteminstance = new ItemInstance({\n        item: req.body.itemid,\n        user: req.body.user,\n        quantity: req.body.count,\n      });\n      iteminstance.save(function (err) {\n        if (err) {\n          return new Error(err);\n        }\n        console.log('add new instance to itemInstance');\n      });\n    } else {\n      // Successful - redirect to new record.\n      console.log('update exist itemInstance');\n    }\n  });\n\n  ItemInstance.find({ user: req.body.user, status: 'Cart' })\n    .populate('item')\n    .exec(function (err, items_carts) {\n      if (err) {\n        res.send('err');\n        console.log('err: ', err);\n        res.end();\n        return new Error(err);\n      } else {\n        // Successful.\n        console.log('find exist itemInstance');\n\n        res.status(201).json({ data: items_carts });\n        res.end();\n      }\n    });*/\n}\n"]},"metadata":{},"sourceType":"module"}