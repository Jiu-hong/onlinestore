{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nexport const config = {\n  api: {\n    externalResolver: true\n  }\n};\nexport default async function handler(req, res) {\n  req.body = JSON.parse(req.body);\n  console.log('req.body: ', req.body);\n  await dbConnect(); //https://stackoverflow.com/questions/38439748/best-way-of-chaining-mongoose-queries\n\n  ItemInstance.findOneAndUpdate({\n    user: req.body.user,\n    status: 'Cart',\n    item: req.body.itemid\n  }, {\n    $inc: {\n      quantity: req.body.count\n    },\n    buy_date: Date.now(),\n    check: true\n  }).then(res => {\n    console.log('I am after findOneAndUpdate in user_addtocart_post.js: ', res);\n\n    if (res == null) {\n      var iteminstance = new ItemInstance({\n        item: req.body.itemid,\n        user: req.body.user,\n        status: 'Cart',\n        quantity: req.body.count\n      });\n      return iteminstance.save();\n    }\n  }).then(res => {\n    console.log('I am after iteminstance.save() in user_addtocart_post.js: ', res);\n    return ItemInstance.find({\n      user: req.body.user,\n      status: 'Cart'\n    }).populate('item');\n  }).then(items_carts => {\n    res.status(201).json({\n      data: items_carts\n    });\n    res.end();\n  }).catch(err => {\n    res.status(500).json({\n      error: err\n    });\n    res.end();\n  });\n  /*\n  await ItemInstance.findOneAndUpdate(\n  { user: req.body.user, status: 'Cart', item: req.body.itemid },\n  { $inc: { quantity: req.body.count }, buy_date: Date.now(), check: true }\n  ).exec(function (err, items_cart) {\n  if (err) {\n    res.send('err');\n    console.log('err: ', err);\n    res.end();\n    return new Error(err);\n  } else if (items_cart == null) {\n    var iteminstance = new ItemInstance({\n      item: req.body.itemid,\n      user: req.body.user,\n      quantity: req.body.count,\n    });\n    iteminstance.save(function (err) {\n      if (err) {\n        return new Error(err);\n      }\n      console.log('add new instance to itemInstance');\n    });\n  } else {\n    // Successful - redirect to new record.\n    console.log('update exist itemInstance');\n  }\n  });\n  ItemInstance.find({ user: req.body.user, status: 'Cart' })\n  .populate('item')\n  .exec(function (err, items_carts) {\n    if (err) {\n      res.send('err');\n      console.log('err: ', err);\n      res.end();\n      return new Error(err);\n    } else {\n      // Successful.\n      console.log('find exist itemInstance');\n       res.status(201).json({ data: items_carts });\n      res.end();\n    }\n  });*/\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_addtocart_post.js"],"names":["ItemInstance","dbConnect","config","api","externalResolver","handler","req","res","body","JSON","parse","console","log","findOneAndUpdate","user","status","item","itemid","$inc","quantity","count","buy_date","Date","now","check","then","iteminstance","save","find","populate","items_carts","json","data","end","catch","err","error"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE;AADjB;AADa,CAAf;AAMP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5CD,EAAAA,GAAG,CAACE,IAAJ,GAAWC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACE,IAAf,CAAX;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,GAAG,CAACE,IAA9B;AACA,QAAMP,SAAS,EAAf,CAH4C,CAK5C;;AACAD,EAAAA,YAAY,CAACa,gBAAb,CACI;AAAEC,IAAAA,IAAI,EAAER,GAAG,CAACE,IAAJ,CAASM,IAAjB;AAAuBC,IAAAA,MAAM,EAAE,MAA/B;AAAuCC,IAAAA,IAAI,EAAEV,GAAG,CAACE,IAAJ,CAASS;AAAtD,GADJ,EAEI;AACIC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAEb,GAAG,CAACE,IAAJ,CAASY;AAArB,KADV;AAEIC,IAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL,EAFd;AAGIC,IAAAA,KAAK,EAAE;AAHX,GAFJ,EAQKC,IARL,CAQWlB,GAAD,IAAS;AACXI,IAAAA,OAAO,CAACC,GAAR,CACI,yDADJ,EAEIL,GAFJ;;AAIA,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACb,UAAImB,YAAY,GAAG,IAAI1B,YAAJ,CAAiB;AAChCgB,QAAAA,IAAI,EAAEV,GAAG,CAACE,IAAJ,CAASS,MADiB;AAEhCH,QAAAA,IAAI,EAAER,GAAG,CAACE,IAAJ,CAASM,IAFiB;AAGhCC,QAAAA,MAAM,EAAE,MAHwB;AAIhCI,QAAAA,QAAQ,EAAEb,GAAG,CAACE,IAAJ,CAASY;AAJa,OAAjB,CAAnB;AAOA,aAAOM,YAAY,CAACC,IAAb,EAAP;AACH;AACJ,GAvBL,EAwBKF,IAxBL,CAwBWlB,GAAD,IAAS;AACXI,IAAAA,OAAO,CAACC,GAAR,CACI,4DADJ,EAEIL,GAFJ;AAIA,WAAOP,YAAY,CAAC4B,IAAb,CAAkB;AACrBd,MAAAA,IAAI,EAAER,GAAG,CAACE,IAAJ,CAASM,IADM;AAErBC,MAAAA,MAAM,EAAE;AAFa,KAAlB,EAGJc,QAHI,CAGK,MAHL,CAAP;AAIH,GAjCL,EAkCKJ,IAlCL,CAkCWK,WAAD,IAAiB;AACnBvB,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB;AAAEC,MAAAA,IAAI,EAAEF;AAAR,KAArB;AACAvB,IAAAA,GAAG,CAAC0B,GAAJ;AACH,GArCL,EAsCKC,KAtCL,CAsCYC,GAAD,IAAS;AACZ5B,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB;AAAEK,MAAAA,KAAK,EAAED;AAAT,KAArB;AACA5B,IAAAA,GAAG,CAAC0B,GAAJ;AACH,GAzCL;AA0CA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n    },\n};\n\nexport default async function handler(req, res) {\n    req.body = JSON.parse(req.body);\n    console.log('req.body: ', req.body);\n    await dbConnect();\n\n    //https://stackoverflow.com/questions/38439748/best-way-of-chaining-mongoose-queries\n    ItemInstance.findOneAndUpdate(\n        { user: req.body.user, status: 'Cart', item: req.body.itemid },\n        {\n            $inc: { quantity: req.body.count },\n            buy_date: Date.now(),\n            check: true,\n        }\n    )\n        .then((res) => {\n            console.log(\n                'I am after findOneAndUpdate in user_addtocart_post.js: ',\n                res\n            );\n            if (res == null) {\n                var iteminstance = new ItemInstance({\n                    item: req.body.itemid,\n                    user: req.body.user,\n                    status: 'Cart',\n                    quantity: req.body.count,\n                });\n\n                return iteminstance.save();\n            }\n        })\n        .then((res) => {\n            console.log(\n                'I am after iteminstance.save() in user_addtocart_post.js: ',\n                res\n            );\n            return ItemInstance.find({\n                user: req.body.user,\n                status: 'Cart',\n            }).populate('item');\n        })\n        .then((items_carts) => {\n            res.status(201).json({ data: items_carts });\n            res.end();\n        })\n        .catch((err) => {\n            res.status(500).json({ error: err });\n            res.end();\n        });\n    /*\n  await ItemInstance.findOneAndUpdate(\n    { user: req.body.user, status: 'Cart', item: req.body.itemid },\n    { $inc: { quantity: req.body.count }, buy_date: Date.now(), check: true }\n  ).exec(function (err, items_cart) {\n    if (err) {\n      res.send('err');\n      console.log('err: ', err);\n      res.end();\n      return new Error(err);\n    } else if (items_cart == null) {\n      var iteminstance = new ItemInstance({\n        item: req.body.itemid,\n        user: req.body.user,\n        quantity: req.body.count,\n      });\n      iteminstance.save(function (err) {\n        if (err) {\n          return new Error(err);\n        }\n        console.log('add new instance to itemInstance');\n      });\n    } else {\n      // Successful - redirect to new record.\n      console.log('update exist itemInstance');\n    }\n  });\n\n  ItemInstance.find({ user: req.body.user, status: 'Cart' })\n    .populate('item')\n    .exec(function (err, items_carts) {\n      if (err) {\n        res.send('err');\n        console.log('err: ', err);\n        res.end();\n        return new Error(err);\n      } else {\n        // Successful.\n        console.log('find exist itemInstance');\n\n        res.status(201).json({ data: items_carts });\n        res.end();\n      }\n    });*/\n}\n"]},"metadata":{},"sourceType":"module"}