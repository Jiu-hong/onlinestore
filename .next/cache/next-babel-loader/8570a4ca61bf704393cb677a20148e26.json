{"ast":null,"code":"import User1 from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\nimport formidable from 'formidable';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\n\nconst getHashedPassword = password => {\n  console.log('password: ', password);\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(password).digest('base64');\n  return hash;\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  }); // console.log('req.body: ', req.body);\n\n  var username, validatedusername, email, validatedemail, password, validatedpassword;\n  var errors = [];\n  await dbConnect();\n  form.parse(req, (err, fields, files) => {\n    console.log('I am in form parse');\n\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    }\n\n    username = fields.username;\n    email = feilds.email;\n    password = fields.password;\n  }); // validator text\n\n  if (validator.isEmpty(validator.trim(fields.username))) {\n    errors.push(' The username is empty');\n  } else {\n    validatedusername = validator.escape(validator.trim(fields.username));\n  }\n\n  if (validator.isEmpty(validator.trim(fields.email))) {\n    errors.push(' The email is empty');\n  } else {\n    if (validator.isEmail(validator.trim(fields.email))) {\n      User1.findOne({\n        email: validator.trim(fields.email)\n      }).then(user => {\n        console.log('the same user');\n        console.log('User in findone :', user);\n        console.log('validatedemail: ', validatedemail);\n        if (user) errors.push('Email already in use');\n      });\n      validatedemail = validator.escape(validator.trim(fields.email));\n    } else {\n      errors.push('The email format is incorrect');\n    }\n  }\n\n  if (validator.isEmpty(validator.trim(fields.password))) {\n    errors.push(' The password is empty');\n  } else {\n    if (validator.isLength(validator.trim(fields.password), {\n      min: 6\n    })) {\n      validatedpassword = validator.escape(validator.trim(fields.password));\n    } else {\n      console.log('I am less than 6');\n      errors.push(' The password must be at least 6 charactors.');\n    }\n  }\n\n  if (validator.trim(fields.confirmPassword) !== validator.trim(fields.password)) {\n    errors.push('Password confirmation does not match password.');\n  }\n\n  console.log('errors here: ', errors);\n\n  if (errors.length > 0) {\n    console.log(' I am here errors:', errors);\n    res.status(500).json({\n      error: errors,\n      status: 500\n    });\n    res.end();\n    return;\n  }\n\n  return;\n  const hashedPassword = getHashedPassword(validatedpassword);\n  var user = new User1({\n    username: validatedusername,\n    email: validatedemail,\n    password: hashedPassword\n  });\n  user.save(function (err, user) {\n    if (err) {\n      res.status(500).json({\n        status: 500,\n        error: err\n      });\n      res.end();\n    } else {\n      console.log('user: ', user); // Successful - redirect to login.\n\n      res.status(201).json({\n        status: 201,\n        data: user\n      });\n      res.end();\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_register_post.js"],"names":["User1","dbConnect","crypto","formidable","validator","config","api","externalResolver","bodyParser","getHashedPassword","password","console","log","sha256","createHash","hash","update","digest","handler","req","res","form","multiples","username","validatedusername","email","validatedemail","validatedpassword","errors","parse","err","fields","files","json","feilds","isEmpty","trim","push","escape","isEmail","findOne","then","user","isLength","min","confirmPassword","length","status","error","end","hashedPassword","save","data"],"mappings":"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","sourcesContent":["import User1 from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\n\nimport formidable from 'formidable';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nconst getHashedPassword = (password) => {\n    console.log('password: ', password);\n    const sha256 = crypto.createHash('sha256');\n    const hash = sha256.update(password).digest('base64');\n    return hash;\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    // console.log('req.body: ', req.body);\n    var username,\n        validatedusername,\n        email,\n        validatedemail,\n        password,\n        validatedpassword;\n    var errors = [];\n    await dbConnect();\n\n    form.parse(req, (err, fields, files) => {\n        console.log('I am in form parse');\n        if (err) {\n            console.log('err: ', err);\n            res.json(err);\n            return;\n        }\n        username = fields.username;\n        email = feilds.email;\n        password = fields.password;\n    });\n\n    // validator text\n    if (validator.isEmpty(validator.trim(fields.username))) {\n        errors.push(' The username is empty');\n    } else {\n        validatedusername = validator.escape(validator.trim(fields.username));\n    }\n\n    if (validator.isEmpty(validator.trim(fields.email))) {\n        errors.push(' The email is empty');\n    } else {\n        if (validator.isEmail(validator.trim(fields.email))) {\n            User1.findOne({ email: validator.trim(fields.email) }).then(\n                (user) => {\n                    console.log('the same user');\n                    console.log('User in findone :', user);\n                    console.log('validatedemail: ', validatedemail);\n                    if (user) errors.push('Email already in use');\n                }\n            );\n\n            validatedemail = validator.escape(validator.trim(fields.email));\n        } else {\n            errors.push('The email format is incorrect');\n        }\n    }\n\n    if (validator.isEmpty(validator.trim(fields.password))) {\n        errors.push(' The password is empty');\n    } else {\n        if (\n            validator.isLength(validator.trim(fields.password), {\n                min: 6,\n            })\n        ) {\n            validatedpassword = validator.escape(\n                validator.trim(fields.password)\n            );\n        } else {\n            console.log('I am less than 6');\n            errors.push(' The password must be at least 6 charactors.');\n        }\n    }\n\n    if (\n        validator.trim(fields.confirmPassword) !==\n        validator.trim(fields.password)\n    ) {\n        errors.push('Password confirmation does not match password.');\n    }\n\n    console.log('errors here: ', errors);\n    if (errors.length > 0) {\n        console.log(' I am here errors:', errors);\n        res.status(500).json({ error: errors, status: 500 });\n        res.end();\n        return;\n    }\n    return;\n    const hashedPassword = getHashedPassword(validatedpassword);\n    var user = new User1({\n        username: validatedusername,\n        email: validatedemail,\n        password: hashedPassword,\n    });\n\n    user.save(function (err, user) {\n        if (err) {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        } else {\n            console.log('user: ', user);\n            // Successful - redirect to login.\n            res.status(201).json({ status: 201, data: user });\n            res.end();\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}