{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\nexport default async function handler(req, res) {\n  console.log('I am in user_comment_post');\n  const form = formidable({\n    multiples: true\n  });\n  var filearray = [];\n  var text, validatedtext, insid, validatedinsid, file;\n  var errors = [];\n  await dbConnect();\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      console.log('I am in err:', err);\n      res.json(err);\n      return;\n    }\n\n    text = fields.textarea;\n    insid = fields.insid;\n    file = files.commentattach;\n    console.log('file after parse: ', file);\n    console.log('file length: ', file.length);\n    console.log('file name: ', file.name);\n    console.log('size', file.size); // validator text\n\n    return;\n\n    if (!validator.isLength(validator.trim(text), {\n      min: 15,\n      max: 500\n    })) {\n      // console.log('The input length should be 15 - 500 length');\n      errors.push(' The input length should be 15 - 500 length');\n    } else {\n      validatedtext = validator.escape(validator.trim(text));\n    }\n\n    if (validator.isEmpty(validator.trim(insid))) {\n      console.log('insid: ', insid); //  console.log('The insid is empty');\n\n      errors.push(' The insid is empty');\n    } else {\n      validatedinsid = validator.escape(validator.trim(insid));\n    }\n\n    if (errors.length > 0) {\n      res.status(500).json({\n        error: errors,\n        status: 500\n      });\n      res.end();\n      return;\n    } // fields.textarea -> send to comment\n\n\n    var oldPath, newPath;\n\n    if (file.length) {\n      // var filestodb = [];\n      for (let i = 0; i < file.length; i++) {\n        oldPath = file[i].path;\n        newPath = 'uploadsnew/' + file[i].name;\n        fs.renameSync(oldPath, newPath);\n        console.log('Successfully renamed - AKA moved!');\n        filearray.push(newPath); //file to db;\n      }\n\n      console.log('filearray : ', filearray);\n    } else {\n      if (file.size !== 0) {\n        oldPath = file.path;\n        newPath = 'uploadsnew/' + file.name;\n        fs.renameSync(oldPath, newPath);\n        console.log('Successfully renamed - AKA moved!');\n        filearray.push(newPath); //file to db\n      } else {\n        console.log('no file');\n      }\n    }\n\n    ItemInstance.findByIdAndUpdate(validatedinsid, {\n      commenttext: validatedtext,\n      commentimage: filearray\n    }).then(items_comment => {\n      console.log('I am here after update comment: ', items_comment);\n      res.status(201).json({\n        data: items_comment\n      });\n      res.end();\n    }).catch(err => {\n      console.log('I am in err: ', err);\n      res.status(500).json({\n        status: 500,\n        error: err\n      });\n      res.end();\n    });\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_comment_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","validator","config","api","externalResolver","bodyParser","handler","req","res","console","log","form","multiples","filearray","text","validatedtext","insid","validatedinsid","file","errors","parse","err","fields","files","json","textarea","commentattach","length","name","size","isLength","trim","min","max","push","escape","isEmpty","status","error","end","oldPath","newPath","i","path","renameSync","findByIdAndUpdate","commenttext","commentimage","then","items_comment","data","catch"],"mappings":"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","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nexport default async function handler(req, res) {\n    console.log('I am in user_comment_post');\n    const form = formidable({ multiples: true });\n    var filearray = [];\n    var text, validatedtext, insid, validatedinsid, file;\n    var errors = [];\n    await dbConnect();\n\n    form.parse(req, (err, fields, files) => {\n        if (err) {\n            console.log('I am in err:', err);\n            res.json(err);\n            return;\n        }\n\n        text = fields.textarea;\n        insid = fields.insid;\n        file = files.commentattach;\n\n        console.log('file after parse: ', file);\n        console.log('file length: ', file.length);\n        console.log('file name: ', file.name);\n        console.log('size', file.size);\n\n        // validator text\n        return;\n        if (!validator.isLength(validator.trim(text), { min: 15, max: 500 })) {\n            // console.log('The input length should be 15 - 500 length');\n            errors.push(' The input length should be 15 - 500 length');\n        } else {\n            validatedtext = validator.escape(validator.trim(text));\n        }\n\n        if (validator.isEmpty(validator.trim(insid))) {\n            console.log('insid: ', insid);\n            //  console.log('The insid is empty');\n            errors.push(' The insid is empty');\n        } else {\n            validatedinsid = validator.escape(validator.trim(insid));\n        }\n\n        if (errors.length > 0) {\n            res.status(500).json({ error: errors, status: 500 });\n            res.end();\n            return;\n        }\n\n        // fields.textarea -> send to comment\n        var oldPath, newPath;\n        if (file.length) {\n            // var filestodb = [];\n            for (let i = 0; i < file.length; i++) {\n                oldPath = file[i].path;\n                newPath = 'uploadsnew/' + file[i].name;\n\n                fs.renameSync(oldPath, newPath);\n                console.log('Successfully renamed - AKA moved!');\n                filearray.push(newPath); //file to db;\n            }\n            console.log('filearray : ', filearray);\n        } else {\n            if (file.size !== 0) {\n                oldPath = file.path;\n                newPath = 'uploadsnew/' + file.name;\n                fs.renameSync(oldPath, newPath);\n                console.log('Successfully renamed - AKA moved!');\n                filearray.push(newPath); //file to db\n            } else {\n                console.log('no file');\n            }\n        }\n\n        ItemInstance.findByIdAndUpdate(validatedinsid, {\n            commenttext: validatedtext,\n            commentimage: filearray,\n        })\n            .then((items_comment) => {\n                console.log('I am here after update comment: ', items_comment);\n                res.status(201).json({ data: items_comment });\n                res.end();\n            })\n            .catch((err) => {\n                console.log('I am in err: ', err);\n                res.status(500).json({ status: 500, error: err });\n                res.end();\n            });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}