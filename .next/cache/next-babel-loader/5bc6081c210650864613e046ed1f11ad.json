{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  });\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      res.json(err);\n      return;\n    }\n\n    console.log('files: ', files);\n    console.log('files.testfile.length: ', files.testfile.length);\n    var oldPath, newPath;\n\n    if (files.testfile.length) {\n      for (let i = 0; i < files.testfile.length; i++) {\n        oldPath = files.testfile.File[i].path;\n        oldPath = 'uploadsnew/' + files.testfile.File[i].name;\n        fs.rename(oldPath, newPath, function (err) {\n          if (err) throw err;\n          console.log('Successfully renamed - AKA moved!');\n        });\n      }\n    } else {\n      oldPath = files.testfile.path;\n      newPath = 'uploadsnew/' + files.testfile.name;\n      fs.rename(oldPath, newPath, function (err) {\n        if (err) throw err;\n        console.log('Successfully renamed - AKA moved!');\n      });\n    } //res.json({ fields, files });\n\n    /*    files.testfile.length\n    var oldPath = files.testfile.path;\n    console.log('oldpath: ', oldPath);\n    var newPath = 'uploadsnew/' + files.testfile.name;\n     fs.rename(oldPath, newPath, function (err) {\n        if (err) throw err;\n        console.log('Successfully renamed - AKA moved!');\n    });*/\n\n  }); // parse form with a Promise wrapper\n\n  /*  const data = await new Promise((resolve, reject) => {\n      const form = new IncomingForm();\n       form.parse(req, (err, fields, files) => {\n          console.log('files: ', files);\n          if (err) return reject(err);\n          resolve({ fields, files });\n      });\n  });\n   // read file from the temporary path\n  const contents = await fs.readFile(data?.files?.nameOfTheInput.path, {\n      encoding: 'utf8',\n  });*/\n  //  var file = req\n  //  req.body = JSON.parse(req.body);\n\n  /*   const data = new Uint8Array(Buffer.from(req.body.file));\n   fs.writeFile('message.txt', data, (err) => {\n      if (err) throw err;\n      console.log('The file has been saved!');\n  });*/\n\n  /* await dbConnect();\n  ItemInstance.findByIdAndUpdate(req.body.id, { comment: req.body.comment })\n      .then((items_comment) => {\n          console.log('I am here after update comment: ', res);\n          res.status(201).json({ data: items_comment });\n          res.end();\n      })\n      .catch((err) => {\n          console.log('I am in err: ', err);\n          res.status(500).json({ error: err });\n          res.end();\n      });*/\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_comment_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","config","api","externalResolver","bodyParser","handler","req","res","form","multiples","parse","err","fields","files","json","console","log","testfile","length","oldPath","newPath","i","File","path","name","rename"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE,IADjB;AAEDC,IAAAA,UAAU,EAAE;AAFX;AADa,CAAf;AAOP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,QAAMC,IAAI,GAAGT,UAAU,CAAC;AAAEU,IAAAA,SAAS,EAAE;AAAb,GAAD,CAAvB;AAEAD,EAAAA,IAAI,CAACE,KAAL,CAAWJ,GAAX,EAAgB,CAACK,GAAD,EAAMC,MAAN,EAAcC,KAAd,KAAwB;AACpC,QAAIF,GAAJ,EAAS;AACLJ,MAAAA,GAAG,CAACO,IAAJ,CAASH,GAAT;AACA;AACH;;AACDI,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCH,KAAK,CAACI,QAAN,CAAeC,MAAtD;AAEA,QAAIC,OAAJ,EAAaC,OAAb;;AACA,QAAIP,KAAK,CAACI,QAAN,CAAeC,MAAnB,EAA2B;AACvB,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACI,QAAN,CAAeC,MAAnC,EAA2CG,CAAC,EAA5C,EAAgD;AAC5CF,QAAAA,OAAO,GAAGN,KAAK,CAACI,QAAN,CAAeK,IAAf,CAAoBD,CAApB,EAAuBE,IAAjC;AACAJ,QAAAA,OAAO,GAAG,gBAAgBN,KAAK,CAACI,QAAN,CAAeK,IAAf,CAAoBD,CAApB,EAAuBG,IAAjD;AACAxB,QAAAA,EAAE,CAACyB,MAAH,CAAUN,OAAV,EAAmBC,OAAnB,EAA4B,UAAUT,GAAV,EAAe;AACvC,cAAIA,GAAJ,EAAS,MAAMA,GAAN;AACTI,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACH,SAHD;AAIH;AACJ,KATD,MASO;AACHG,MAAAA,OAAO,GAAGN,KAAK,CAACI,QAAN,CAAeM,IAAzB;AACAH,MAAAA,OAAO,GAAG,gBAAgBP,KAAK,CAACI,QAAN,CAAeO,IAAzC;AACAxB,MAAAA,EAAE,CAACyB,MAAH,CAAUN,OAAV,EAAmBC,OAAnB,EAA4B,UAAUT,GAAV,EAAe;AACvC,YAAIA,GAAJ,EAAS,MAAMA,GAAN;AACTI,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACH,OAHD;AAIH,KAzBmC,CA0BpC;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEK,GApCD,EAH4C,CAyC5C;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGI;AACA;;AACA;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n\n    form.parse(req, (err, fields, files) => {\n        if (err) {\n            res.json(err);\n            return;\n        }\n        console.log('files: ', files);\n        console.log('files.testfile.length: ', files.testfile.length);\n\n        var oldPath, newPath;\n        if (files.testfile.length) {\n            for (let i = 0; i < files.testfile.length; i++) {\n                oldPath = files.testfile.File[i].path;\n                oldPath = 'uploadsnew/' + files.testfile.File[i].name;\n                fs.rename(oldPath, newPath, function (err) {\n                    if (err) throw err;\n                    console.log('Successfully renamed - AKA moved!');\n                });\n            }\n        } else {\n            oldPath = files.testfile.path;\n            newPath = 'uploadsnew/' + files.testfile.name;\n            fs.rename(oldPath, newPath, function (err) {\n                if (err) throw err;\n                console.log('Successfully renamed - AKA moved!');\n            });\n        }\n        //res.json({ fields, files });\n        /*    files.testfile.length\n        var oldPath = files.testfile.path;\n        console.log('oldpath: ', oldPath);\n        var newPath = 'uploadsnew/' + files.testfile.name;\n\n        fs.rename(oldPath, newPath, function (err) {\n            if (err) throw err;\n            console.log('Successfully renamed - AKA moved!');\n        });*/\n    });\n\n    // parse form with a Promise wrapper\n    /*  const data = await new Promise((resolve, reject) => {\n        const form = new IncomingForm();\n\n        form.parse(req, (err, fields, files) => {\n            console.log('files: ', files);\n            if (err) return reject(err);\n            resolve({ fields, files });\n        });\n    });\n\n    // read file from the temporary path\n    const contents = await fs.readFile(data?.files?.nameOfTheInput.path, {\n        encoding: 'utf8',\n    });*/\n    //  var file = req\n    //  req.body = JSON.parse(req.body);\n    /*   const data = new Uint8Array(Buffer.from(req.body.file));\n\n    fs.writeFile('message.txt', data, (err) => {\n        if (err) throw err;\n        console.log('The file has been saved!');\n    });*/\n    /* await dbConnect();\n    ItemInstance.findByIdAndUpdate(req.body.id, { comment: req.body.comment })\n        .then((items_comment) => {\n            console.log('I am here after update comment: ', res);\n            res.status(201).json({ data: items_comment });\n            res.end();\n        })\n        .catch((err) => {\n            console.log('I am in err: ', err);\n            res.status(500).json({ error: err });\n            res.end();\n        });*/\n}\n"]},"metadata":{},"sourceType":"module"}