{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/components/Counter.js\";\nimport { useReducer, useContext, createContext } from 'react';\nconst CounterStateContext = /*#__PURE__*/createContext();\nconst CounterDispatchContext = /*#__PURE__*/createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREASE':\n      return state + 1;\n\n    case 'DECREASE':\n      return state - 1;\n\n    case 'INCREASE_BY':\n      return state + action.payload;\n\n    default:\n      throw new Error(`Unknown action: ${action.type}`);\n  }\n};\n\nexport const CounterProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, 0);\n  return /*#__PURE__*/_jsxDEV(CounterDispatchContext.Provider, {\n    value: dispatch,\n    children: /*#__PURE__*/_jsxDEV(CounterStateContext.Provider, {\n      value: state,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\nexport const useCount = () => useContext(CounterStateContext);\nexport const useDispatchCount = () => useContext(CounterDispatchContext);","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/components/Counter.js"],"names":["useReducer","useContext","createContext","CounterStateContext","CounterDispatchContext","reducer","state","action","type","payload","Error","CounterProvider","children","dispatch","useCount","useDispatchCount"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,aAAjC,QAAsD,OAAtD;AAEA,MAAMC,mBAAmB,gBAAGD,aAAa,EAAzC;AACA,MAAME,sBAAsB,gBAAGF,aAAa,EAA5C;;AAEA,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,UAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF,SAAK,aAAL;AACE,aAAOA,KAAK,GAAGC,MAAM,CAACE,OAAtB;;AACF;AACE,YAAM,IAAIC,KAAJ,CAAW,mBAAkBH,MAAM,CAACC,IAAK,EAAzC,CAAN;AARJ;AAUD,CAXD;;AAaA,OAAO,MAAMG,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/C,QAAM;AAAA,OAACN,KAAD;AAAA,OAAQO;AAAR,MAAoBb,UAAU,CAACK,OAAD,EAAU,CAAV,CAApC;AACA,sBACE,QAAC,sBAAD,CAAwB,QAAxB;AAAiC,IAAA,KAAK,EAAEQ,QAAxC;AAAA,2BACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAEP,KAArC;AAAA,gBACGM;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CATM;AAWP,OAAO,MAAME,QAAQ,GAAG,MAAMb,UAAU,CAACE,mBAAD,CAAjC;AACP,OAAO,MAAMY,gBAAgB,GAAG,MAAMd,UAAU,CAACG,sBAAD,CAAzC","sourcesContent":["import { useReducer, useContext, createContext } from 'react';\n\nconst CounterStateContext = createContext();\nconst CounterDispatchContext = createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREASE':\n      return state + 1;\n    case 'DECREASE':\n      return state - 1;\n    case 'INCREASE_BY':\n      return state + action.payload;\n    default:\n      throw new Error(`Unknown action: ${action.type}`);\n  }\n};\n\nexport const CounterProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, 0);\n  return (\n    <CounterDispatchContext.Provider value={dispatch}>\n      <CounterStateContext.Provider value={state}>\n        {children}\n      </CounterStateContext.Provider>\n    </CounterDispatchContext.Provider>\n  );\n};\n\nexport const useCount = () => useContext(CounterStateContext);\nexport const useDispatchCount = () => useContext(CounterDispatchContext);\n"]},"metadata":{},"sourceType":"module"}