{"ast":null,"code":"import User1 from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\nimport formidable from 'formidable';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\n\nconst getHashedPassword = password => {\n  console.log('password: ', password);\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(password).digest('base64');\n  return hash;\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  }); // console.log('req.body: ', req.body);\n\n  var username, validatedusername, email, validatedemail, password, validatedpassword;\n  var errors = [];\n  await dbConnect();\n  var formfields = await new Promise((resolve, reject) => form.parse(req, (err, fields, files) => {\n    console.log('I am in form parse');\n\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    }\n    /*  username = fields.username;\n    email = feilds.email;\n    password = fields.password;*/\n\n\n    resolve(fields);\n  }));\n  console.log('formfields.subjects: ', formfields); // validator text\n\n  if (validator.isEmpty(validator.trim(formfields.username))) {\n    console.log('username in if ');\n    errors.push(' The username is empty');\n  } else {\n    console.log('username in else');\n    validatedusername = validator.escape(validator.trim(formfields.username));\n  }\n\n  if (validator.isEmpty(validator.trim(fields.email))) {\n    errors.push(' The email is empty');\n  } else {\n    if (validator.isEmail(validator.trim(fields.email))) {\n      validatedemail = validator.escape(validator.trim(fields.email));\n    } else {\n      errors.push('The email format is incorrect');\n    }\n  }\n\n  if (validator.isEmpty(validator.trim(fields.password))) {\n    errors.push(' The password is empty');\n  } else {\n    if (validator.isLength(validator.trim(fields.password), {\n      min: 6\n    })) {\n      validatedpassword = validator.escape(validator.trim(fields.password));\n    } else {\n      console.log('I am less than 6');\n      errors.push(' The password must be at least 6 charactors.');\n    }\n  }\n\n  if (validator.trim(fields.confirmPassword) !== validator.trim(fields.password)) {\n    errors.push('Password confirmation does not match password.');\n  }\n\n  console.log('errors here: ', errors);\n\n  if (errors.length > 0) {\n    console.log(' I am here errors:', errors);\n    res.status(500).json({\n      error: errors,\n      status: 500\n    });\n    res.end();\n    return;\n  }\n\n  return;\n  const hashedPassword = getHashedPassword(validatedpassword);\n  var user = new User1({\n    username: validatedusername,\n    email: validatedemail,\n    password: hashedPassword\n  });\n  user.save(function (err, user) {\n    if (err) {\n      res.status(500).json({\n        status: 500,\n        error: err\n      });\n      res.end();\n    } else {\n      console.log('user: ', user); // Successful - redirect to login.\n\n      res.status(201).json({\n        status: 201,\n        data: user\n      });\n      res.end();\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_register_post.js"],"names":["User1","dbConnect","crypto","formidable","validator","config","api","externalResolver","bodyParser","getHashedPassword","password","console","log","sha256","createHash","hash","update","digest","handler","req","res","form","multiples","username","validatedusername","email","validatedemail","validatedpassword","errors","formfields","Promise","resolve","reject","parse","err","fields","files","json","isEmpty","trim","push","escape","isEmail","isLength","min","confirmPassword","length","status","error","end","hashedPassword","user","save","data"],"mappings":"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","sourcesContent":["import User1 from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\n\nimport formidable from 'formidable';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nconst getHashedPassword = (password) => {\n    console.log('password: ', password);\n    const sha256 = crypto.createHash('sha256');\n    const hash = sha256.update(password).digest('base64');\n    return hash;\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    // console.log('req.body: ', req.body);\n    var username,\n        validatedusername,\n        email,\n        validatedemail,\n        password,\n        validatedpassword;\n    var errors = [];\n    await dbConnect();\n\n    var formfields = await new Promise((resolve, reject) =>\n        form.parse(req, (err, fields, files) => {\n            console.log('I am in form parse');\n            if (err) {\n                console.log('err: ', err);\n                res.json(err);\n                return;\n            }\n            /*  username = fields.username;\n            email = feilds.email;\n            password = fields.password;*/\n            resolve(fields);\n        })\n    );\n\n    console.log('formfields.subjects: ', formfields);\n\n    // validator text\n    if (validator.isEmpty(validator.trim(formfields.username))) {\n        console.log('username in if ');\n        errors.push(' The username is empty');\n    } else {\n        console.log('username in else');\n        validatedusername = validator.escape(\n            validator.trim(formfields.username)\n        );\n    }\n\n    if (validator.isEmpty(validator.trim(fields.email))) {\n        errors.push(' The email is empty');\n    } else {\n        if (validator.isEmail(validator.trim(fields.email))) {\n            validatedemail = validator.escape(validator.trim(fields.email));\n        } else {\n            errors.push('The email format is incorrect');\n        }\n    }\n\n    if (validator.isEmpty(validator.trim(fields.password))) {\n        errors.push(' The password is empty');\n    } else {\n        if (\n            validator.isLength(validator.trim(fields.password), {\n                min: 6,\n            })\n        ) {\n            validatedpassword = validator.escape(\n                validator.trim(fields.password)\n            );\n        } else {\n            console.log('I am less than 6');\n            errors.push(' The password must be at least 6 charactors.');\n        }\n    }\n\n    if (\n        validator.trim(fields.confirmPassword) !==\n        validator.trim(fields.password)\n    ) {\n        errors.push('Password confirmation does not match password.');\n    }\n\n    console.log('errors here: ', errors);\n    if (errors.length > 0) {\n        console.log(' I am here errors:', errors);\n        res.status(500).json({ error: errors, status: 500 });\n        res.end();\n        return;\n    }\n    return;\n    const hashedPassword = getHashedPassword(validatedpassword);\n    var user = new User1({\n        username: validatedusername,\n        email: validatedemail,\n        password: hashedPassword,\n    });\n\n    user.save(function (err, user) {\n        if (err) {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        } else {\n            console.log('user: ', user);\n            // Successful - redirect to login.\n            res.status(201).json({ status: 201, data: user });\n            res.end();\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}