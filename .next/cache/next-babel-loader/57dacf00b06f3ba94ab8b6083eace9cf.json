{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true\n  }\n};\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  });\n  console.log('req.body: ', req.body);\n  console.log('req.body.email: ', req.body.email);\n  console.log('req.body.password: ', req.body.password);\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      res.json(err);\n      return;\n    }\n\n    text = fields.textarea;\n    insid = fields.insid;\n    file = files.commentattach;\n  });\n  return;\n  var filearray = [];\n  var text, validatedtext, insid, validatedinsid, file;\n  var errors = [];\n  await dbConnect(); // validator text\n\n  if (!validator.isLength(validator.trim(text), {\n    min: 15,\n    max: 500\n  })) {\n    errors.push(' The input length should be 15 - 500 length');\n  } else {\n    validatedtext = validator.escape(validator.trim(text));\n  }\n\n  if (validator.isEmpty(validator.trim(insid))) {\n    errors.push(' The insid is empty');\n  } else {\n    validatedinsid = validator.escape(validator.trim(insid));\n  }\n\n  if (errors.length > 0) {\n    res.status(500).json({\n      error: errors,\n      status: 500\n    });\n    res.end();\n    return;\n  }\n\n  ItemInstance.findByIdAndUpdate(validatedinsid, {\n    commenttext: validatedtext,\n    commentimage: filearray\n  }).populate('item').then(items_comment => {\n    res.status(201).json({\n      status: 201,\n      data: items_comment\n    });\n    res.end();\n  }).catch(err => {\n    res.status(500).json({\n      status: 500,\n      error: err\n    });\n    res.end();\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_logon_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","validator","config","api","externalResolver","handler","req","res","form","multiples","console","log","body","email","password","parse","err","fields","files","json","text","textarea","insid","file","commentattach","filearray","validatedtext","validatedinsid","errors","isLength","trim","min","max","push","escape","isEmpty","length","status","error","end","findByIdAndUpdate","commenttext","commentimage","populate","then","items_comment","data","catch"],"mappings":"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","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n    },\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    console.log('req.body: ', req.body);\n    console.log('req.body.email: ', req.body.email);\n    console.log('req.body.password: ', req.body.password);\n\n    form.parse(req, (err, fields, files) => {\n        if (err) {\n            res.json(err);\n            return;\n        }\n\n        text = fields.textarea;\n        insid = fields.insid;\n        file = files.commentattach;\n    });\n    return;\n    var filearray = [];\n    var text, validatedtext, insid, validatedinsid, file;\n    var errors = [];\n    await dbConnect();\n\n    // validator text\n\n    if (!validator.isLength(validator.trim(text), { min: 15, max: 500 })) {\n        errors.push(' The input length should be 15 - 500 length');\n    } else {\n        validatedtext = validator.escape(validator.trim(text));\n    }\n\n    if (validator.isEmpty(validator.trim(insid))) {\n        errors.push(' The insid is empty');\n    } else {\n        validatedinsid = validator.escape(validator.trim(insid));\n    }\n\n    if (errors.length > 0) {\n        res.status(500).json({ error: errors, status: 500 });\n        res.end();\n        return;\n    }\n\n    ItemInstance.findByIdAndUpdate(validatedinsid, {\n        commenttext: validatedtext,\n        commentimage: filearray,\n    })\n        .populate('item')\n        .then((items_comment) => {\n            res.status(201).json({ status: 201, data: items_comment });\n            res.end();\n        })\n        .catch((err) => {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        });\n}\n"]},"metadata":{},"sourceType":"module"}