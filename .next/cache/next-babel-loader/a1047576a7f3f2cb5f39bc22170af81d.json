{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true\n  }\n};\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  });\n  console.log('req.body: ', req.body);\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    }\n\n    console.log('req.body.email: ', fields.email);\n    console.log('req.body.password: ', fields.password);\n    return;\n  });\n  /*\n  var filearray = [];\n  var text, validatedtext, insid, validatedinsid, file;\n  var errors = [];\n  await dbConnect();\n   // validator text\n   if (!validator.isLength(validator.trim(text), { min: 15, max: 500 })) {\n      errors.push(' The input length should be 15 - 500 length');\n  } else {\n      validatedtext = validator.escape(validator.trim(text));\n  }\n   if (validator.isEmpty(validator.trim(insid))) {\n      errors.push(' The insid is empty');\n  } else {\n      validatedinsid = validator.escape(validator.trim(insid));\n  }\n   if (errors.length > 0) {\n      res.status(500).json({ error: errors, status: 500 });\n      res.end();\n      return;\n  }\n   ItemInstance.findByIdAndUpdate(validatedinsid, {\n      commenttext: validatedtext,\n      commentimage: filearray,\n  })\n      .populate('item')\n      .then((items_comment) => {\n          res.status(201).json({ status: 201, data: items_comment });\n          res.end();\n      })\n      .catch((err) => {\n          res.status(500).json({ status: 500, error: err });\n          res.end();\n      });*/\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_logon_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","validator","config","api","externalResolver","handler","req","res","form","multiples","console","log","body","parse","err","fields","files","json","email","password"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE;AADjB;AADa,CAAf;AAMP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,QAAMC,IAAI,GAAGT,UAAU,CAAC;AAAEU,IAAAA,SAAS,EAAE;AAAb,GAAD,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BL,GAAG,CAACM,IAA9B;AAEAJ,EAAAA,IAAI,CAACK,KAAL,CAAWP,GAAX,EAAgB,CAACQ,GAAD,EAAMC,MAAN,EAAcC,KAAd,KAAwB;AACpC,QAAIF,GAAJ,EAAS;AACLJ,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,GAArB;AACAP,MAAAA,GAAG,CAACU,IAAJ,CAASH,GAAT;AACA;AACH;;AAEDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCI,MAAM,CAACG,KAAvC;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCI,MAAM,CAACI,QAA1C;AACA;AACH,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMC","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n    },\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    console.log('req.body: ', req.body);\n\n    form.parse(req, (err, fields, files) => {\n        if (err) {\n            console.log('err: ', err);\n            res.json(err);\n            return;\n        }\n\n        console.log('req.body.email: ', fields.email);\n        console.log('req.body.password: ', fields.password);\n        return;\n    });\n    /*\n    var filearray = [];\n    var text, validatedtext, insid, validatedinsid, file;\n    var errors = [];\n    await dbConnect();\n\n    // validator text\n\n    if (!validator.isLength(validator.trim(text), { min: 15, max: 500 })) {\n        errors.push(' The input length should be 15 - 500 length');\n    } else {\n        validatedtext = validator.escape(validator.trim(text));\n    }\n\n    if (validator.isEmpty(validator.trim(insid))) {\n        errors.push(' The insid is empty');\n    } else {\n        validatedinsid = validator.escape(validator.trim(insid));\n    }\n\n    if (errors.length > 0) {\n        res.status(500).json({ error: errors, status: 500 });\n        res.end();\n        return;\n    }\n\n    ItemInstance.findByIdAndUpdate(validatedinsid, {\n        commenttext: validatedtext,\n        commentimage: filearray,\n    })\n        .populate('item')\n        .then((items_comment) => {\n            res.status(201).json({ status: 201, data: items_comment });\n            res.end();\n        })\n        .catch((err) => {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        });*/\n}\n"]},"metadata":{},"sourceType":"module"}