{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport '../styles/globals.css';\nimport Item from '../models/Item';\nimport dbConnect from '../utils/dbConnect';\nimport App from 'next/app';\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      items = _ref.items;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, items), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(appContext) {\n    var appProps, result, items;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return App.getInitialProps(appContext);\n\n          case 2:\n            appProps = _context.sent;\n            console.log('appProps: ', appProps);\n            _context.next = 6;\n            return dbConnect();\n\n          case 6:\n            _context.next = 8;\n            return Item.find({});\n\n          case 8:\n            result = _context.sent;\n            items = JSON.parse(JSON.stringify(result));\n            return _context.abrupt(\"return\", {\n              appProps: {\n                pageProps: {\n                  items: items\n                }\n              }\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/*\nexport async function getStaticProps() {\n  //export async function getServerSideProps() {\n  await dbConnect();\n\n  /* find all the data in our database \n  const result = await Item.find({});\n  const items = JSON.parse(JSON.stringify(result));\n\n  return { props: { pageProps: items } };\n}\n*/\n\n\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/_app.js"],"names":["Item","dbConnect","App","MyApp","Component","items","getInitialProps","appContext","appProps","console","log","find","result","JSON","parse","stringify","pageProps"],"mappings":";;;;;;;;;;;AAAA,OAAO,uBAAP;AACA,OAAOA,IAAP,MAAiB,gBAAjB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,GAAP,MAAgB,UAAhB;;AACA,SAASC,KAAT,OAAqC;AAAA,MAApBC,SAAoB,QAApBA,SAAoB;AAAA,MAATC,KAAS,QAATA,KAAS;AACnC,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE,QAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAOD,C,CAED;AACA;AACA;AACA;;;KAbSF,K;;AAeTA,KAAK,CAACG,eAAN;AAAA,uEAAwB,iBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAECL,GAAG,CAACI,eAAJ,CAAoBC,UAApB,CAFD;;AAAA;AAEhBC,YAAAA,QAFgB;AAGtBC,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,QAA1B;AAHsB;AAAA,mBAIhBP,SAAS,EAJO;;AAAA;AAAA;AAAA,mBAMDD,IAAI,CAACW,IAAL,CAAU,EAAV,CANC;;AAAA;AAMhBC,YAAAA,MANgB;AAOhBP,YAAAA,KAPgB,GAORQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,MAAf,CAAX,CAPQ;AAAA,6CAQf;AAAEJ,cAAAA,QAAQ,EAAE;AAAEQ,gBAAAA,SAAS,EAAE;AAAEX,kBAAAA,KAAK,EAALA;AAAF;AAAb;AAAZ,aARe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeF,KAAf","sourcesContent":["import '../styles/globals.css';\nimport Item from '../models/Item';\nimport dbConnect from '../utils/dbConnect';\nimport App from 'next/app';\nfunction MyApp({ Component, items }) {\n  return (\n    <>\n      <div className='grid wrapper'>\n        <Component {...items} />\n      </div>\n    </>\n  );\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n\nMyApp.getInitialProps = async (appContext) => {\n  //calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n  console.log('appProps: ', appProps);\n  await dbConnect();\n\n  const result = await Item.find({});\n  const items = JSON.parse(JSON.stringify(result));\n  return { appProps: { pageProps: { items } } };\n};\n/*\nexport async function getStaticProps() {\n  //export async function getServerSideProps() {\n  await dbConnect();\n\n  /* find all the data in our database \n  const result = await Item.find({});\n  const items = JSON.parse(JSON.stringify(result));\n\n  return { props: { pageProps: items } };\n}\n*/\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}