{"ast":null,"code":"import { body, validationResult } from 'express-validator';\nimport ItemInstance from '../../models/iteminstance';\n\nconst vb = () => {\n  body('count').trim().isLength({\n    min: 1\n  }).escape().custom(value => {\n    if (isNaN(parseInt(value))) {\n      throw new Error('count shound be numebr');\n    }\n\n    return true;\n  });\n};\n\nexport default async function handler(req, res) {\n  await vb(); // Extract the validation errors from a request.\n\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    // There are errors. Render form again with sanitized values/errors messages.\n    console.log('errors+ ', util.inspect(errors, {\n      showHidden: false,\n      depth: null\n    }));\n    res.send('error for nan');\n    return;\n  }\n\n  var count = parseInt(req.body.count);\n  var itemid = req.body.itemid;\n\n  if (req.user) {\n    var user = req.user;\n  } else if (cartkey) {\n    user = cartkey;\n  } else {\n    var user = Math.random();\n  }\n\n  ItemInstance.findOneAndUpdate({\n    user: user,\n    status: 'Cart',\n    item: itemid\n  }, {\n    $inc: {\n      quantity: count\n    },\n    buy_date: Date.now(),\n    check: true\n  }).exec(function (err, items_cart) {\n    console.log('err in itemInstance: ', err);\n\n    if (err) {\n      return new Error(err);\n    } else {\n      if (items_cart == null) {\n        var iteminstance = new ItemInstance({\n          item: itemid,\n          user: req.user,\n          quantity: count\n        });\n        iteminstance.save(function (err) {\n          if (err) {\n            return new Error(err);\n          }\n\n          console.log('and new instance to itemInstance');\n        });\n      } // Successful - redirect to new record.\n\n\n      res.send('success');\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_addtocart_post.js"],"names":["body","validationResult","ItemInstance","vb","trim","isLength","min","escape","custom","value","isNaN","parseInt","Error","handler","req","res","errors","isEmpty","console","log","util","inspect","showHidden","depth","send","count","itemid","user","cartkey","Math","random","findOneAndUpdate","status","item","$inc","quantity","buy_date","Date","now","check","exec","err","items_cart","iteminstance","save"],"mappings":"AAAA,SAASA,IAAT,EAAeC,gBAAf,QAAuC,mBAAvC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;AAEA,MAAMC,EAAE,GAAG,MAAM;AACfH,EAAAA,IAAI,CAAC,OAAD,CAAJ,CACGI,IADH,GAEGC,QAFH,CAEY;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAFZ,EAGGC,MAHH,GAIGC,MAJH,CAIWC,KAAD,IAAW;AACjB,QAAIC,KAAK,CAACC,QAAQ,CAACF,KAAD,CAAT,CAAT,EAA4B;AAC1B,YAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,WAAO,IAAP;AACD,GATH;AAUD,CAXD;;AAYA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,QAAMZ,EAAE,EAAR,CAD8C,CAE9C;;AACA,QAAMa,MAAM,GAAGf,gBAAgB,CAACa,GAAD,CAA/B;;AAEA,MAAI,CAACE,MAAM,CAACC,OAAP,EAAL,EAAuB;AACrB;AACAC,IAAAA,OAAO,CAACC,GAAR,CACE,UADF,EAEEC,IAAI,CAACC,OAAL,CAAaL,MAAb,EAAqB;AAAEM,MAAAA,UAAU,EAAE,KAAd;AAAqBC,MAAAA,KAAK,EAAE;AAA5B,KAArB,CAFF;AAIAR,IAAAA,GAAG,CAACS,IAAJ,CAAS,eAAT;AACA;AACD;;AAED,MAAIC,KAAK,GAAGd,QAAQ,CAACG,GAAG,CAACd,IAAJ,CAASyB,KAAV,CAApB;AACA,MAAIC,MAAM,GAAGZ,GAAG,CAACd,IAAJ,CAAS0B,MAAtB;;AAEA,MAAIZ,GAAG,CAACa,IAAR,EAAc;AACZ,QAAIA,IAAI,GAAGb,GAAG,CAACa,IAAf;AACD,GAFD,MAEO,IAAIC,OAAJ,EAAa;AAClBD,IAAAA,IAAI,GAAGC,OAAP;AACD,GAFM,MAEA;AACL,QAAID,IAAI,GAAGE,IAAI,CAACC,MAAL,EAAX;AACD;;AACD5B,EAAAA,YAAY,CAAC6B,gBAAb,CACE;AAAEJ,IAAAA,IAAI,EAAEA,IAAR;AAAcK,IAAAA,MAAM,EAAE,MAAtB;AAA8BC,IAAAA,IAAI,EAAEP;AAApC,GADF,EAEE;AAAEQ,IAAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAEV;AAAZ,KAAR;AAA6BW,IAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL,EAAvC;AAAmDC,IAAAA,KAAK,EAAE;AAA1D,GAFF,EAGEC,IAHF,CAGO,UAAUC,GAAV,EAAeC,UAAf,EAA2B;AAChCxB,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCsB,GAArC;;AACA,QAAIA,GAAJ,EAAS;AACP,aAAO,IAAI7B,KAAJ,CAAU6B,GAAV,CAAP;AACD,KAFD,MAEO;AACL,UAAIC,UAAU,IAAI,IAAlB,EAAwB;AACtB,YAAIC,YAAY,GAAG,IAAIzC,YAAJ,CAAiB;AAClC+B,UAAAA,IAAI,EAAEP,MAD4B;AAElCC,UAAAA,IAAI,EAAEb,GAAG,CAACa,IAFwB;AAGlCQ,UAAAA,QAAQ,EAAEV;AAHwB,SAAjB,CAAnB;AAKAkB,QAAAA,YAAY,CAACC,IAAb,CAAkB,UAAUH,GAAV,EAAe;AAC/B,cAAIA,GAAJ,EAAS;AACP,mBAAO,IAAI7B,KAAJ,CAAU6B,GAAV,CAAP;AACD;;AACDvB,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACD,SALD;AAMD,OAbI,CAcL;;;AACAJ,MAAAA,GAAG,CAACS,IAAJ,CAAS,SAAT;AACD;AACF,GAxBD;AAyBD","sourcesContent":["import { body, validationResult } from 'express-validator';\nimport ItemInstance from '../../models/iteminstance';\n\nconst vb = () => {\n  body('count')\n    .trim()\n    .isLength({ min: 1 })\n    .escape()\n    .custom((value) => {\n      if (isNaN(parseInt(value))) {\n        throw new Error('count shound be numebr');\n      }\n      return true;\n    });\n};\nexport default async function handler(req, res) {\n  await vb();\n  // Extract the validation errors from a request.\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    // There are errors. Render form again with sanitized values/errors messages.\n    console.log(\n      'errors+ ',\n      util.inspect(errors, { showHidden: false, depth: null })\n    );\n    res.send('error for nan');\n    return;\n  }\n\n  var count = parseInt(req.body.count);\n  var itemid = req.body.itemid;\n\n  if (req.user) {\n    var user = req.user;\n  } else if (cartkey) {\n    user = cartkey;\n  } else {\n    var user = Math.random();\n  }\n  ItemInstance.findOneAndUpdate(\n    { user: user, status: 'Cart', item: itemid },\n    { $inc: { quantity: count }, buy_date: Date.now(), check: true }\n  ).exec(function (err, items_cart) {\n    console.log('err in itemInstance: ', err);\n    if (err) {\n      return new Error(err);\n    } else {\n      if (items_cart == null) {\n        var iteminstance = new ItemInstance({\n          item: itemid,\n          user: req.user,\n          quantity: count,\n        });\n        iteminstance.save(function (err) {\n          if (err) {\n            return new Error(err);\n          }\n          console.log('and new instance to itemInstance');\n        });\n      }\n      // Successful - redirect to new record.\n      res.send('success');\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}