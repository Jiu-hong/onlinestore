{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  });\n  var filearray = [];\n  var text, validatedtext, insid, validatedinsid, file;\n  var errors = [];\n  await dbConnect();\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      res.json(err);\n      return;\n    }\n\n    text = fields.textarea;\n    insid = fields.insid;\n    file = files.commentattach; // validator text\n\n    if (!validator.isLength(validator.trim(text), {\n      min: 15,\n      max: 500\n    })) {\n      errors.push(' The input length should be 15 - 500 length');\n    } else {\n      validatedtext = validator.escape(validator.trim(text));\n    }\n\n    if (validator.isEmpty(validator.trim(insid))) {\n      errors.push(' The insid is empty');\n    } else {\n      validatedinsid = validator.escape(validator.trim(insid));\n    }\n\n    if (errors.length > 0) {\n      res.status(500).json({\n        error: errors,\n        status: 500\n      });\n      res.end();\n      return;\n    } // fields.textarea -> send to comment\n\n\n    var oldPath, newPath;\n\n    if (file.length) {\n      // var filestodb = [];\n      for (let i = 0; i < file.length; i++) {\n        oldPath = file[i].path;\n        newPath = 'public/comment/' + file[i].name;\n        fs.renameSync(oldPath, newPath);\n        newPath = '/' + newPath.split('/').slice(1).join('/');\n        filearray.push(newPath); //file to db;\n      }\n    } else {\n      if (file.size !== 0) {\n        oldPath = file.path;\n        newPath = 'public/comment/' + file.name;\n        fs.renameSync(oldPath, newPath);\n        newPath = '/' + newPath.split('/').slice(1).join('/');\n        filearray.push(newPath); //file to db\n      } else {\n        console.log('no file');\n      }\n    }\n\n    ItemInstance.findByIdAndUpdate(validatedinsid, {\n      ordernumber: 'test123',\n      commenttext: validatedtext,\n      commentimage: filearray\n    }).populate('item').then(items_comment => {\n      console.log('order1');\n      console.log('items_comment: ', items_comment);\n      res.status(201).json({\n        status: 201,\n        data: items_comment\n      });\n      res.end();\n    }).catch(err => {\n      res.status(500).json({\n        status: 500,\n        error: err\n      });\n      res.end();\n    });\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_comment_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","validator","config","api","externalResolver","bodyParser","handler","req","res","form","multiples","filearray","text","validatedtext","insid","validatedinsid","file","errors","parse","err","fields","files","json","textarea","commentattach","isLength","trim","min","max","push","escape","isEmpty","length","status","error","end","oldPath","newPath","i","path","name","renameSync","split","slice","join","size","console","log","findByIdAndUpdate","ordernumber","commenttext","commentimage","populate","then","items_comment","data","catch"],"mappings":"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","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    var filearray = [];\n    var text, validatedtext, insid, validatedinsid, file;\n    var errors = [];\n    await dbConnect();\n\n    form.parse(req, (err, fields, files) => {\n        if (err) {\n            res.json(err);\n            return;\n        }\n\n        text = fields.textarea;\n        insid = fields.insid;\n        file = files.commentattach;\n\n        // validator text\n\n        if (!validator.isLength(validator.trim(text), { min: 15, max: 500 })) {\n            errors.push(' The input length should be 15 - 500 length');\n        } else {\n            validatedtext = validator.escape(validator.trim(text));\n        }\n\n        if (validator.isEmpty(validator.trim(insid))) {\n            errors.push(' The insid is empty');\n        } else {\n            validatedinsid = validator.escape(validator.trim(insid));\n        }\n\n        if (errors.length > 0) {\n            res.status(500).json({ error: errors, status: 500 });\n            res.end();\n            return;\n        }\n\n        // fields.textarea -> send to comment\n        var oldPath, newPath;\n        if (file.length) {\n            // var filestodb = [];\n            for (let i = 0; i < file.length; i++) {\n                oldPath = file[i].path;\n                newPath = 'public/comment/' + file[i].name;\n\n                fs.renameSync(oldPath, newPath);\n                newPath = '/' + newPath.split('/').slice(1).join('/');\n\n                filearray.push(newPath); //file to db;\n            }\n        } else {\n            if (file.size !== 0) {\n                oldPath = file.path;\n                newPath = 'public/comment/' + file.name;\n                fs.renameSync(oldPath, newPath);\n                newPath = '/' + newPath.split('/').slice(1).join('/');\n\n                filearray.push(newPath); //file to db\n            } else {\n                console.log('no file');\n            }\n        }\n\n        ItemInstance.findByIdAndUpdate(validatedinsid, {\n            ordernumber: 'test123',\n            commenttext: validatedtext,\n            commentimage: filearray,\n        })\n            .populate('item')\n            .then((items_comment) => {\n                console.log('order1');\n                console.log('items_comment: ', items_comment);\n                res.status(201).json({ status: 201, data: items_comment });\n                res.end();\n            })\n            .catch((err) => {\n                res.status(500).json({ status: 500, error: err });\n                res.end();\n            });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}