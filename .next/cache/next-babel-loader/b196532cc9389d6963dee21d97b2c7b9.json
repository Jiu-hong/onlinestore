{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\nexport default async function handler(req, res) {\n  console.log('req.formData: ', req.formData);\n  const form = formidable({\n    multiples: true\n  });\n  var filearray = [];\n  var text, validatedtext, insid, validatedinsid;\n  var errors = [];\n  await dbConnect();\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      res.json(err);\n      return;\n    }\n\n    text = fields.textarea;\n    insid = fields.insid;\n    console.log('text: ', text);\n    console.log('insid: ', insid);\n    return; // validator text\n\n    if (!validator.isLength(validator.trim(text), {\n      min: 15,\n      max: 500\n    })) {\n      // console.log('The input length should be 15 - 500 length');\n      errors.push(' The input length should be 15 - 500 length');\n    } else {\n      validatedtext = validator.escape(validator.trim(text));\n    }\n\n    if (validator.isEmpty(validator.trim(insid))) {\n      console.log('insid: ', insid); //  console.log('The insid is empty');\n\n      errors.push(' The insid is empty');\n    } else {\n      validatedinsid = validator.escape(validator.trim(insid));\n    }\n\n    if (errors.length > 0) {\n      res.status(500).json({\n        error: errors\n      });\n      res.end();\n      return;\n    }\n\n    return; // fields.textarea -> send to comment\n\n    var oldPath, newPath;\n\n    if (files.commentattach.length) {\n      // var filestodb = [];\n      for (let i = 0; i < files.commentattach.length; i++) {\n        oldPath = files.commentattach[i].path;\n        newPath = 'uploadsnew/' + files.commentattach[i].name;\n        fs.renameSync(oldPath, newPath);\n        console.log('Successfully renamed - AKA moved!');\n        filearray.push(newPath); //file to db;\n      }\n\n      console.log('filearray : ', filearray);\n    } else {\n      oldPath = files.commentattach.path;\n      newPath = 'uploadsnew/' + files.commentattach.name;\n      fs.renameSync(oldPath, newPath);\n      console.log('Successfully renamed - AKA moved!');\n      filearray.push(newPath); //file to db\n    }\n\n    ItemInstance.findByIdAndUpdate(validatedinsid, {\n      commenttext: validatedtext,\n      commentimage: filearray\n    }).then(items_comment => {\n      console.log('I am here after update comment: ', items_comment);\n      res.status(201).json({\n        data: items_comment\n      });\n      res.end();\n    }).catch(err => {\n      console.log('I am in err: ', err);\n      res.status(500).json({\n        error: err\n      });\n      res.end();\n    });\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_comment_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","validator","config","api","externalResolver","bodyParser","handler","req","res","console","log","formData","form","multiples","filearray","text","validatedtext","insid","validatedinsid","errors","parse","err","fields","files","json","textarea","isLength","trim","min","max","push","escape","isEmpty","length","status","error","end","oldPath","newPath","commentattach","i","path","name","renameSync","findByIdAndUpdate","commenttext","commentimage","then","items_comment","data","catch"],"mappings":"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","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nexport default async function handler(req, res) {\n    console.log('req.formData: ', req.formData);\n    const form = formidable({ multiples: true });\n    var filearray = [];\n    var text, validatedtext, insid, validatedinsid;\n    var errors = [];\n    await dbConnect();\n\n    form.parse(req, (err, fields, files) => {\n        if (err) {\n            res.json(err);\n            return;\n        }\n\n        text = fields.textarea;\n        insid = fields.insid;\n        console.log('text: ', text);\n        console.log('insid: ', insid);\n        return;\n        // validator text\n\n        if (!validator.isLength(validator.trim(text), { min: 15, max: 500 })) {\n            // console.log('The input length should be 15 - 500 length');\n            errors.push(' The input length should be 15 - 500 length');\n        } else {\n            validatedtext = validator.escape(validator.trim(text));\n        }\n\n        if (validator.isEmpty(validator.trim(insid))) {\n            console.log('insid: ', insid);\n            //  console.log('The insid is empty');\n            errors.push(' The insid is empty');\n        } else {\n            validatedinsid = validator.escape(validator.trim(insid));\n        }\n\n        if (errors.length > 0) {\n            res.status(500).json({ error: errors });\n            res.end();\n            return;\n        }\n        return;\n        // fields.textarea -> send to comment\n        var oldPath, newPath;\n        if (files.commentattach.length) {\n            // var filestodb = [];\n            for (let i = 0; i < files.commentattach.length; i++) {\n                oldPath = files.commentattach[i].path;\n                newPath = 'uploadsnew/' + files.commentattach[i].name;\n\n                fs.renameSync(oldPath, newPath);\n                console.log('Successfully renamed - AKA moved!');\n                filearray.push(newPath); //file to db;\n            }\n            console.log('filearray : ', filearray);\n        } else {\n            oldPath = files.commentattach.path;\n            newPath = 'uploadsnew/' + files.commentattach.name;\n            fs.renameSync(oldPath, newPath);\n            console.log('Successfully renamed - AKA moved!');\n            filearray.push(newPath); //file to db\n        }\n\n        ItemInstance.findByIdAndUpdate(validatedinsid, {\n            commenttext: validatedtext,\n            commentimage: filearray,\n        })\n            .then((items_comment) => {\n                console.log('I am here after update comment: ', items_comment);\n                res.status(201).json({ data: items_comment });\n                res.end();\n            })\n            .catch((err) => {\n                console.log('I am in err: ', err);\n                res.status(500).json({ error: err });\n                res.end();\n            });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}