{"ast":null,"code":"import { body, validationResult } from 'express-validator';\nimport ItemInstance from '../../models/iteminstance';\nimport util from 'util';\n\nconst vb = () => {\n  body('count').trim().isLength({\n    min: 1\n  }).escape().custom(value => {\n    if (isNaN(parseInt(value))) {\n      throw new Error('count shound be numebr');\n    }\n\n    return true;\n  });\n};\n\nexport default async function handler(req, res) {\n  req.body = JSON.parse(req.body);\n  await vb(); // Extract the validation errors from a request.\n\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    // There are errors. Render form again with sanitized values/errors messages.\n    console.log('errors+ ', util.inspect(errors, {\n      showHidden: false,\n      depth: null\n    }));\n    res.send('error for nan');\n    res.end();\n    return;\n  }\n\n  var count = parseInt(req.body.count);\n  console.log('req.body: ', JSON.stringify(req.body));\n  console.log('count: ', count);\n  var itemid = req.body.itemid;\n  ItemInstance.findOneAndUpdate({\n    user: req.body.user,\n    status: 'Cart',\n    item: itemid\n  }, {\n    $inc: {\n      quantity: count\n    },\n    buy_date: Date.now(),\n    check: true\n  }).exec(function (err, items_cart) {\n    if (err) {\n      res.send('err');\n      res.end();\n      return new Error(err);\n    } else {\n      if (items_cart == null) {\n        var iteminstance = new ItemInstance({\n          item: itemid,\n          user: req.body.user,\n          quantity: count\n        });\n        iteminstance.save(function (err) {\n          if (err) {\n            return new Error(err);\n          }\n\n          console.log('and new instance to itemInstance');\n          res.status(201).json({\n            success: true\n          });\n          res.end();\n        });\n      } // Successful - redirect to new record.\n\n\n      res.status(201).json({\n        success: true\n      });\n      res.end();\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_addtocart_post.js"],"names":["body","validationResult","ItemInstance","util","vb","trim","isLength","min","escape","custom","value","isNaN","parseInt","Error","handler","req","res","JSON","parse","errors","isEmpty","console","log","inspect","showHidden","depth","send","end","count","stringify","itemid","findOneAndUpdate","user","status","item","$inc","quantity","buy_date","Date","now","check","exec","err","items_cart","iteminstance","save","json","success"],"mappings":"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","sourcesContent":["import { body, validationResult } from 'express-validator';\nimport ItemInstance from '../../models/iteminstance';\nimport util from 'util';\nconst vb = () => {\n  body('count')\n    .trim()\n    .isLength({ min: 1 })\n    .escape()\n    .custom((value) => {\n      if (isNaN(parseInt(value))) {\n        throw new Error('count shound be numebr');\n      }\n      return true;\n    });\n};\nexport default async function handler(req, res) {\n  req.body = JSON.parse(req.body);\n\n  await vb();\n  // Extract the validation errors from a request.\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    // There are errors. Render form again with sanitized values/errors messages.\n    console.log(\n      'errors+ ',\n      util.inspect(errors, { showHidden: false, depth: null })\n    );\n    res.send('error for nan');\n    res.end();\n    return;\n  }\n\n  var count = parseInt(req.body.count);\n  console.log('req.body: ', JSON.stringify(req.body));\n  console.log('count: ', count);\n  var itemid = req.body.itemid;\n\n  ItemInstance.findOneAndUpdate(\n    { user: req.body.user, status: 'Cart', item: itemid },\n    { $inc: { quantity: count }, buy_date: Date.now(), check: true }\n  ).exec(function (err, items_cart) {\n    if (err) {\n      res.send('err');\n      res.end();\n      return new Error(err);\n    } else {\n      if (items_cart == null) {\n        var iteminstance = new ItemInstance({\n          item: itemid,\n          user: req.body.user,\n          quantity: count,\n        });\n        iteminstance.save(function (err) {\n          if (err) {\n            return new Error(err);\n          }\n          console.log('and new instance to itemInstance');\n          res.status(201).json({ success: true });\n          res.end();\n        });\n      }\n      // Successful - redirect to new record.\n      res.status(201).json({ success: true });\n      res.end();\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}