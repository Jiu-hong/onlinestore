{"ast":null,"code":"import User from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\nimport formidable from 'formidable';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\n\nconst getHashedPassword = password => {\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(password).digest('base64');\n  return hash;\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  });\n  var validatedemail, validatedpassword;\n  var errors = [];\n  await dbConnect();\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    } // validator text\n\n\n    if (validator.isEmpty(validator.trim(fields.email))) {\n      errors.push(' The email is empty');\n    } else {\n      if (validator.isEmail(validator.trim(fields.email))) {\n        validatedemail = validator.escape(validator.trim(fields.email));\n      } else {\n        errors.push(' The email format is incorrect');\n      }\n    }\n\n    if (validator.isEmpty(validator.trim(fields.password))) {\n      errors.push(' The password is empty');\n    } else {\n      if (validator.isLength(validator.trim(fields.password), {\n        min: 6\n      })) {\n        validatedpassword = validator.escape(validator.trim(fields.password));\n      } else {\n        errors.push('The password must be at least 6 charactors.');\n      }\n    }\n\n    if (errors.length > 0) {\n      res.status(500).json({\n        error: errors,\n        status: 500\n      });\n      res.end();\n      return;\n    }\n\n    const hashedPassword = getHashedPassword(validatedpassword);\n    User.findOne({\n      email: validatedemail,\n      password: hashedPassword\n    }).then(user => {\n      if (!user) {\n        errors.push('Invalid username or password');\n        res.status(404).json({\n          status: 404,\n          error: errors\n        });\n        res.end();\n      } else {\n        res.status(201).json({\n          status: 201,\n          data: user\n        });\n        res.end();\n      }\n    }).catch(err => {\n      res.status(500).json({\n        status: 500,\n        error: err\n      });\n      res.end();\n    });\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_logon_post.js"],"names":["User","dbConnect","crypto","formidable","validator","config","api","externalResolver","bodyParser","getHashedPassword","password","sha256","createHash","hash","update","digest","handler","req","res","form","multiples","validatedemail","validatedpassword","errors","parse","err","fields","files","console","log","json","isEmpty","trim","email","push","isEmail","escape","isLength","min","length","status","error","end","hashedPassword","findOne","then","user","data","catch"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE,IADjB;AAEDC,IAAAA,UAAU,EAAE;AAFX;AADa,CAAf;;AAOP,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACpC,QAAMC,MAAM,GAAGT,MAAM,CAACU,UAAP,CAAkB,QAAlB,CAAf;AACA,QAAMC,IAAI,GAAGF,MAAM,CAACG,MAAP,CAAcJ,QAAd,EAAwBK,MAAxB,CAA+B,QAA/B,CAAb;AACA,SAAOF,IAAP;AACH,CAJD;;AAMA,eAAe,eAAeG,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,QAAMC,IAAI,GAAGhB,UAAU,CAAC;AAAEiB,IAAAA,SAAS,EAAE;AAAb,GAAD,CAAvB;AAEA,MAAIC,cAAJ,EAAoBC,iBAApB;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMtB,SAAS,EAAf;AAEAkB,EAAAA,IAAI,CAACK,KAAL,CAAWP,GAAX,EAAgB,CAACQ,GAAD,EAAMC,MAAN,EAAcC,KAAd,KAAwB;AACpC,QAAIF,GAAJ,EAAS;AACLG,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,GAArB;AACAP,MAAAA,GAAG,CAACY,IAAJ,CAASL,GAAT;AACA;AACH,KALmC,CAOpC;;;AAEA,QAAIrB,SAAS,CAAC2B,OAAV,CAAkB3B,SAAS,CAAC4B,IAAV,CAAeN,MAAM,CAACO,KAAtB,CAAlB,CAAJ,EAAqD;AACjDV,MAAAA,MAAM,CAACW,IAAP,CAAY,qBAAZ;AACH,KAFD,MAEO;AACH,UAAI9B,SAAS,CAAC+B,OAAV,CAAkB/B,SAAS,CAAC4B,IAAV,CAAeN,MAAM,CAACO,KAAtB,CAAlB,CAAJ,EAAqD;AACjDZ,QAAAA,cAAc,GAAGjB,SAAS,CAACgC,MAAV,CAAiBhC,SAAS,CAAC4B,IAAV,CAAeN,MAAM,CAACO,KAAtB,CAAjB,CAAjB;AACH,OAFD,MAEO;AACHV,QAAAA,MAAM,CAACW,IAAP,CAAY,gCAAZ;AACH;AACJ;;AAED,QAAI9B,SAAS,CAAC2B,OAAV,CAAkB3B,SAAS,CAAC4B,IAAV,CAAeN,MAAM,CAAChB,QAAtB,CAAlB,CAAJ,EAAwD;AACpDa,MAAAA,MAAM,CAACW,IAAP,CAAY,wBAAZ;AACH,KAFD,MAEO;AACH,UACI9B,SAAS,CAACiC,QAAV,CAAmBjC,SAAS,CAAC4B,IAAV,CAAeN,MAAM,CAAChB,QAAtB,CAAnB,EAAoD;AAAE4B,QAAAA,GAAG,EAAE;AAAP,OAApD,CADJ,EAEE;AACEhB,QAAAA,iBAAiB,GAAGlB,SAAS,CAACgC,MAAV,CAChBhC,SAAS,CAAC4B,IAAV,CAAeN,MAAM,CAAChB,QAAtB,CADgB,CAApB;AAGH,OAND,MAMO;AACHa,QAAAA,MAAM,CAACW,IAAP,CAAY,6CAAZ;AACH;AACJ;;AAED,QAAIX,MAAM,CAACgB,MAAP,GAAgB,CAApB,EAAuB;AACnBrB,MAAAA,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAAEW,QAAAA,KAAK,EAAElB,MAAT;AAAiBiB,QAAAA,MAAM,EAAE;AAAzB,OAArB;AACAtB,MAAAA,GAAG,CAACwB,GAAJ;AACA;AACH;;AAED,UAAMC,cAAc,GAAGlC,iBAAiB,CAACa,iBAAD,CAAxC;AACAtB,IAAAA,IAAI,CAAC4C,OAAL,CAAa;AAAEX,MAAAA,KAAK,EAAEZ,cAAT;AAAyBX,MAAAA,QAAQ,EAAEiC;AAAnC,KAAb,EACKE,IADL,CACWC,IAAD,IAAU;AACZ,UAAI,CAACA,IAAL,EAAW;AACPvB,QAAAA,MAAM,CAACW,IAAP,CAAY,8BAAZ;AACAhB,QAAAA,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAAEU,UAAAA,MAAM,EAAE,GAAV;AAAeC,UAAAA,KAAK,EAAElB;AAAtB,SAArB;AACAL,QAAAA,GAAG,CAACwB,GAAJ;AACH,OAJD,MAIO;AACHxB,QAAAA,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAAEU,UAAAA,MAAM,EAAE,GAAV;AAAeO,UAAAA,IAAI,EAAED;AAArB,SAArB;AACA5B,QAAAA,GAAG,CAACwB,GAAJ;AACH;AACJ,KAVL,EAWKM,KAXL,CAWYvB,GAAD,IAAS;AACZP,MAAAA,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAAEU,QAAAA,MAAM,EAAE,GAAV;AAAeC,QAAAA,KAAK,EAAEhB;AAAtB,OAArB;AACAP,MAAAA,GAAG,CAACwB,GAAJ;AACH,KAdL;AAeH,GAvDD;AAwDH","sourcesContent":["import User from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\n\nimport formidable from 'formidable';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nconst getHashedPassword = (password) => {\n    const sha256 = crypto.createHash('sha256');\n    const hash = sha256.update(password).digest('base64');\n    return hash;\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n\n    var validatedemail, validatedpassword;\n    var errors = [];\n    await dbConnect();\n\n    form.parse(req, (err, fields, files) => {\n        if (err) {\n            console.log('err: ', err);\n            res.json(err);\n            return;\n        }\n\n        // validator text\n\n        if (validator.isEmpty(validator.trim(fields.email))) {\n            errors.push(' The email is empty');\n        } else {\n            if (validator.isEmail(validator.trim(fields.email))) {\n                validatedemail = validator.escape(validator.trim(fields.email));\n            } else {\n                errors.push(' The email format is incorrect');\n            }\n        }\n\n        if (validator.isEmpty(validator.trim(fields.password))) {\n            errors.push(' The password is empty');\n        } else {\n            if (\n                validator.isLength(validator.trim(fields.password), { min: 6 })\n            ) {\n                validatedpassword = validator.escape(\n                    validator.trim(fields.password)\n                );\n            } else {\n                errors.push('The password must be at least 6 charactors.');\n            }\n        }\n\n        if (errors.length > 0) {\n            res.status(500).json({ error: errors, status: 500 });\n            res.end();\n            return;\n        }\n\n        const hashedPassword = getHashedPassword(validatedpassword);\n        User.findOne({ email: validatedemail, password: hashedPassword })\n            .then((user) => {\n                if (!user) {\n                    errors.push('Invalid username or password');\n                    res.status(404).json({ status: 404, error: errors });\n                    res.end();\n                } else {\n                    res.status(201).json({ status: 201, data: user });\n                    res.end();\n                }\n            })\n            .catch((err) => {\n                res.status(500).json({ status: 500, error: err });\n                res.end();\n            });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}