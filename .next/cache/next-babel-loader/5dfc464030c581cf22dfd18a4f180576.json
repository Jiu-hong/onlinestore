{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/store/[id].js\";\nimport { useEffect, useRef, useState } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport dbConnect from '../../utils/dbConnect';\nimport Item from '../../models/item'; //import { useInsDispatch } from '../pages/contexts/CartContext';\n//import { useUser } from '../pages/contexts/userContext';\n//import { usefunctions } from '../pages/contexts/functionContext';\n\n/*\nexport default function CartInstances({ iteminstance }) {\n  const router = useRouter();\n  const { id } = router.query;\n  const inputEL = useRef(null);\n  const [incdis, setIncdis] = useState(false);\n  const [decdis, setDecdis] = useState(false);\n  const [dltdis, setDltdis] = useState(false);\n\n  const user = useUser();\n  const { ChangeToCart, DeleteIns, ChangeAddCart } = usefunctions();\n  const { setInstance, setInsLen } = useInsDispatch();\n\n  var a,\n    c = false;\n  var oldValue = iteminstance.quantity;\n  var oldValueforback = iteminstance.quantity;\n\n  const handleCount = (e) => {\n    console.log('oldValueforback: ', oldValueforback);\n    console.log('oldValue: ', oldValue);\n    if (inputEL.current.validity.valid) {\n      if (inputEL.current.value == '') {\n        //this is for empty\n        c = true;\n        a = setTimeout(() => (inputEL.current.value = oldValueforback), 2000);\n      } else {\n        c = false;\n        //this is for number\n        if (a) {\n          clearTimeout(a);\n          a = null;\n        }\n        if (e.nativeEvent.inputType !== 'deleteContentBackward') {\n          oldValueforback = inputEL.current.value;\n        }\n        oldValue = inputEL.current.value;\n      }\n    } else {\n      //this is for invalid\n      if (!c) {\n        //previous is number then use oldValue\n        inputEL.current.value = oldValue;\n        oldValueforback = inputEL.current.value;\n      } else {\n        //previous is \"\" then use oldValueforback\n        inputEL.current.value = oldValueforback;\n        clearTimeout(a);\n        console.log('I am in clear timeout below');\n        a = null;\n        c = false;\n        oldValue = inputEL.current.value;\n      }\n    }\n    setIncdis(parseInt(inputEL.current.value) >= 999);\n    setDecdis(parseInt(inputEL.current.value) <= 1);\n  };\n\n  const handleIncrease = (e) => {\n    setIncdis(true);\n    setDecdis(true);\n    setDltdis(true);\n    inputEL.current.value = parseInt(inputEL.current.value) + 1;\n    //hanle DB -> plus value\n    ChangeAddCart(1, iteminstance._id, user, setInstance, setInsLen).then(\n      () => {\n        console.log('I am in handleIncrease');\n        setIncdis(parseInt(inputEL.current.value) >= 999);\n        setDecdis(parseInt(inputEL.current.value) <= 1);\n        setDltdis(false);\n      }\n    );\n  };\n  const handleDecrease = (e) => {\n    setIncdis(true);\n    setDecdis(true);\n    setDltdis(true);\n    inputEL.current.value = parseInt(inputEL.current.value) - 1;\n    //hanle DB -> minus value\n    ChangeAddCart(-1, iteminstance._id, user, setInstance, setInsLen).then(\n      () => {\n        console.log('I am in handleDecrease');\n        setIncdis(parseInt(inputEL.current.value) >= 999);\n        setDecdis(parseInt(inputEL.current.value) <= 1);\n        setDltdis(false);\n      }\n    );\n  };\n\n  const handlefocus = () => {\n    setIncdis(true);\n    setDecdis(true);\n    setDltdis(true);\n    //handle DB -> change value\n    ChangeToCart(\n      inputEL.current.value,\n      iteminstance._id,\n      user,\n      setInstance,\n      setInsLen\n    ).then(() => {\n      console.log('I am in handlefocus');\n      setIncdis(parseInt(inputEL.current.value) >= 999);\n      setDecdis(parseInt(inputEL.current.value) <= 1);\n      setDltdis(false);\n    });\n  };\n\n  const handleDelIns = () => {\n    DeleteIns(iteminstance._id, user, setInstance, setInsLen);\n  };\n\n  useEffect(() => {\n    setIncdis(parseInt(inputEL.current.value) >= 999);\n    setDecdis(parseInt(inputEL.current.value) <= 1);\n    console.log('I am in effect');\n  }, [user]);\n  return (\n    <>\n      <div key={iteminstance._id}>\n        <div className='card card-body'>\n          <img\n            src={iteminstance.item.image}\n            style={{\n              display: 'block',\n              margin: '0 auto 10px',\n              height: '200px',\n              width: '200px',\n            }}\n          />\n          <p className='item-name'>{iteminstance.item.title}</p>\n\n          <h3 className='text-left'>price: {iteminstance.item.price}</h3>\n\n          <div className='text-right'>\n            <Link href='/[id]' as={`/${iteminstance.item._id}`}>\n              <a className='btn btn-link btn-sm mr-2'>detail</a>\n            </Link>\n\n            <button\n              onClick={() => handleDelIns(iteminstance)}\n              className='btn btn-outline-primary btn-sm disable'\n              disabled={dltdis}\n            >\n              Delete Item\n            </button>\n\n            <button\n              onClick={() => handleIncrease(iteminstance)}\n              className='btn btn-outline-primary btn-sm disable'\n              disabled={incdis}\n            >\n              + add\n            </button>\n            <input\n              id='id1'\n              type='text'\n              ref={inputEL}\n              // onInput={handleCount}\n              onBlur={handlefocus}\n              onChange={handleCount}\n              className='form-control input-lg'\n              pattern='[1-9][0-9]*'\n              style={{ width: '100px' }}\n              defaultValue={iteminstance.quantity}\n            />\n            <button\n              onClick={() => handleDecrease(iteminstance)}\n              className='btn btn-outline-primary btn-sm disable'\n              disabled={decdis}\n            >\n              - minus\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n} */\n\nexport default function Post({\n  post\n}) {\n  // Render post...\n  console.log('post: ', post);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport async function getStaticPaths() {\n  //get items from db like index\n  // Call an external API endpoint to get posts\n  await dbConnect(); // find all the data in our database\n\n  const result = await Item.find({});\n  const items = JSON.parse(JSON.stringify(result)); // Get the paths we want to pre-render based on posts\n\n  const paths = items.map(item => ({\n    params: {\n      id: item\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false //fallback: true or false // See the \"fallback\" section below\n\n  };\n} // This also gets called at build time\n\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const post = params.id; // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/store/[id].js"],"names":["useEffect","useRef","useState","Link","useRouter","dbConnect","Item","Post","post","console","log","title","getStaticPaths","result","find","items","JSON","parse","stringify","paths","map","item","params","id","fallback","getStaticProps","props"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjeAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAwB;AACrC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AACA,sBACE;AAAA,4BACE;AAAA,gBAAIA,IAAI,CAACG;AAAT;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA;AACA,QAAMP,SAAS,EAAf,CAHqC,CAKrC;;AACA,QAAMQ,MAAM,GAAG,MAAMP,IAAI,CAACQ,IAAL,CAAU,EAAV,CAArB;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,MAAf,CAAX,CAAd,CAPqC,CAQrC;;AACA,QAAMM,KAAK,GAAGJ,KAAK,CAACK,GAAN,CAAWC,IAAD,KAAW;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,EAAE,EAAEF;AAAN;AAAV,GAAX,CAAV,CAAd,CATqC,CAWrC;AACA;;AACA,SAAO;AACLF,IAAAA,KADK;AAELK,IAAAA,QAAQ,EAAE,KAFL,CAGL;;AAHK,GAAP;AAKD,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEH,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA;AAEA,QAAMd,IAAI,GAAGc,MAAM,CAACC,EAApB,CAJ+C,CAM/C;;AACA,SAAO;AAAEG,IAAAA,KAAK,EAAE;AAAElB,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport dbConnect from '../../utils/dbConnect';\nimport Item from '../../models/item';\n//import { useInsDispatch } from '../pages/contexts/CartContext';\n//import { useUser } from '../pages/contexts/userContext';\n//import { usefunctions } from '../pages/contexts/functionContext';\n\n/*\nexport default function CartInstances({ iteminstance }) {\n  const router = useRouter();\n  const { id } = router.query;\n  const inputEL = useRef(null);\n  const [incdis, setIncdis] = useState(false);\n  const [decdis, setDecdis] = useState(false);\n  const [dltdis, setDltdis] = useState(false);\n\n  const user = useUser();\n  const { ChangeToCart, DeleteIns, ChangeAddCart } = usefunctions();\n  const { setInstance, setInsLen } = useInsDispatch();\n\n  var a,\n    c = false;\n  var oldValue = iteminstance.quantity;\n  var oldValueforback = iteminstance.quantity;\n\n  const handleCount = (e) => {\n    console.log('oldValueforback: ', oldValueforback);\n    console.log('oldValue: ', oldValue);\n    if (inputEL.current.validity.valid) {\n      if (inputEL.current.value == '') {\n        //this is for empty\n        c = true;\n        a = setTimeout(() => (inputEL.current.value = oldValueforback), 2000);\n      } else {\n        c = false;\n        //this is for number\n        if (a) {\n          clearTimeout(a);\n          a = null;\n        }\n        if (e.nativeEvent.inputType !== 'deleteContentBackward') {\n          oldValueforback = inputEL.current.value;\n        }\n        oldValue = inputEL.current.value;\n      }\n    } else {\n      //this is for invalid\n      if (!c) {\n        //previous is number then use oldValue\n        inputEL.current.value = oldValue;\n        oldValueforback = inputEL.current.value;\n      } else {\n        //previous is \"\" then use oldValueforback\n        inputEL.current.value = oldValueforback;\n        clearTimeout(a);\n        console.log('I am in clear timeout below');\n        a = null;\n        c = false;\n        oldValue = inputEL.current.value;\n      }\n    }\n    setIncdis(parseInt(inputEL.current.value) >= 999);\n    setDecdis(parseInt(inputEL.current.value) <= 1);\n  };\n\n  const handleIncrease = (e) => {\n    setIncdis(true);\n    setDecdis(true);\n    setDltdis(true);\n    inputEL.current.value = parseInt(inputEL.current.value) + 1;\n    //hanle DB -> plus value\n    ChangeAddCart(1, iteminstance._id, user, setInstance, setInsLen).then(\n      () => {\n        console.log('I am in handleIncrease');\n        setIncdis(parseInt(inputEL.current.value) >= 999);\n        setDecdis(parseInt(inputEL.current.value) <= 1);\n        setDltdis(false);\n      }\n    );\n  };\n  const handleDecrease = (e) => {\n    setIncdis(true);\n    setDecdis(true);\n    setDltdis(true);\n    inputEL.current.value = parseInt(inputEL.current.value) - 1;\n    //hanle DB -> minus value\n    ChangeAddCart(-1, iteminstance._id, user, setInstance, setInsLen).then(\n      () => {\n        console.log('I am in handleDecrease');\n        setIncdis(parseInt(inputEL.current.value) >= 999);\n        setDecdis(parseInt(inputEL.current.value) <= 1);\n        setDltdis(false);\n      }\n    );\n  };\n\n  const handlefocus = () => {\n    setIncdis(true);\n    setDecdis(true);\n    setDltdis(true);\n    //handle DB -> change value\n    ChangeToCart(\n      inputEL.current.value,\n      iteminstance._id,\n      user,\n      setInstance,\n      setInsLen\n    ).then(() => {\n      console.log('I am in handlefocus');\n      setIncdis(parseInt(inputEL.current.value) >= 999);\n      setDecdis(parseInt(inputEL.current.value) <= 1);\n      setDltdis(false);\n    });\n  };\n\n  const handleDelIns = () => {\n    DeleteIns(iteminstance._id, user, setInstance, setInsLen);\n  };\n\n  useEffect(() => {\n    setIncdis(parseInt(inputEL.current.value) >= 999);\n    setDecdis(parseInt(inputEL.current.value) <= 1);\n    console.log('I am in effect');\n  }, [user]);\n  return (\n    <>\n      <div key={iteminstance._id}>\n        <div className='card card-body'>\n          <img\n            src={iteminstance.item.image}\n            style={{\n              display: 'block',\n              margin: '0 auto 10px',\n              height: '200px',\n              width: '200px',\n            }}\n          />\n          <p className='item-name'>{iteminstance.item.title}</p>\n\n          <h3 className='text-left'>price: {iteminstance.item.price}</h3>\n\n          <div className='text-right'>\n            <Link href='/[id]' as={`/${iteminstance.item._id}`}>\n              <a className='btn btn-link btn-sm mr-2'>detail</a>\n            </Link>\n\n            <button\n              onClick={() => handleDelIns(iteminstance)}\n              className='btn btn-outline-primary btn-sm disable'\n              disabled={dltdis}\n            >\n              Delete Item\n            </button>\n\n            <button\n              onClick={() => handleIncrease(iteminstance)}\n              className='btn btn-outline-primary btn-sm disable'\n              disabled={incdis}\n            >\n              + add\n            </button>\n            <input\n              id='id1'\n              type='text'\n              ref={inputEL}\n              // onInput={handleCount}\n              onBlur={handlefocus}\n              onChange={handleCount}\n              className='form-control input-lg'\n              pattern='[1-9][0-9]*'\n              style={{ width: '100px' }}\n              defaultValue={iteminstance.quantity}\n            />\n            <button\n              onClick={() => handleDecrease(iteminstance)}\n              className='btn btn-outline-primary btn-sm disable'\n              disabled={decdis}\n            >\n              - minus\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n} */\nexport default function Post({ post }) {\n  // Render post...\n  console.log('post: ', post);\n  return (\n    <>\n      <p>{post.title}</p>\n      <p>hello</p>\n    </>\n  );\n}\n\nexport async function getStaticPaths() {\n  //get items from db like index\n  // Call an external API endpoint to get posts\n  await dbConnect();\n\n  // find all the data in our database\n  const result = await Item.find({});\n  const items = JSON.parse(JSON.stringify(result));\n  // Get the paths we want to pre-render based on posts\n  const paths = items.map((item) => ({ params: { id: item } }));\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return {\n    paths,\n    fallback: false,\n    //fallback: true or false // See the \"fallback\" section below\n  };\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n\n  const post = params.id;\n\n  // Pass post data to the page via props\n  return { props: { post } };\n}\n"]},"metadata":{},"sourceType":"module"}