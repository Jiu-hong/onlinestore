{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true\n  }\n};\nexport default async function handler(req, res) {\n  req.body = JSON.parse(req.body);\n  var chkarray;\n  var ordernumber;\n  var validateduser;\n\n  if (validator.isEmpty(validator.trim(req.body.user))) {\n    errors.push(' The user is empty');\n  } else {\n    validateduser = validator.escape(validator.trim(req.body.user));\n  }\n\n  await dbConnect();\n  /* await ItemInstance.find({ status: 'Cart', check: true })\n      .then((result) => {\n          if (result) {\n              result.map((ins) => {\n                  chkarray.push(ins._id);\n              });\n          } else {\n              console.log('checked instances is zero');\n              res.status(500).json({ error: 'checked instances is zero' });\n              res.end();\n          }\n      })\n      .catch((err) => {\n          res.status(500).json({ error: err });\n          res.end();\n      });*/\n\n  /* ordernumber = Math.floor(new Date().valueOf() + Math.random());\n  var order = new Order({\n      ordernumber: ordernumber,\n      itemInstances: chkarray,\n      user: validatduser,\n      buy_date: Date.now(),\n  });\n   order.save().then();*/\n  // first write to order document?\n\n  ItemInstance.updateMany({\n    status: 'Cart',\n    check: true\n  }, {\n    status: 'Checkout',\n    ordernumber: ordernumber,\n    buy_date: Date.now()\n  }).then(() => {\n    return ItemInstance.find({\n      user: req.body.user,\n      status: 'Cart'\n    }).populate('item');\n  }).then(items_carts => {\n    res.status(201).json({\n      data: items_carts\n    });\n    res.end();\n  }).catch(err => {\n    res.status(500).json({\n      error: err\n    });\n    res.end();\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_chckout_post.js"],"names":["ItemInstance","dbConnect","validator","config","api","externalResolver","handler","req","res","body","JSON","parse","chkarray","ordernumber","validateduser","isEmpty","trim","user","errors","push","escape","updateMany","status","check","buy_date","Date","now","then","find","populate","items_carts","json","data","end","catch","err","error"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE;AADjB;AADa,CAAf;AAMP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5CD,EAAAA,GAAG,CAACE,IAAJ,GAAWC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACE,IAAf,CAAX;AACA,MAAIG,QAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,aAAJ;;AAEA,MAAIZ,SAAS,CAACa,OAAV,CAAkBb,SAAS,CAACc,IAAV,CAAeT,GAAG,CAACE,IAAJ,CAASQ,IAAxB,CAAlB,CAAJ,EAAsD;AAClDC,IAAAA,MAAM,CAACC,IAAP,CAAY,oBAAZ;AACH,GAFD,MAEO;AACHL,IAAAA,aAAa,GAAGZ,SAAS,CAACkB,MAAV,CAAiBlB,SAAS,CAACc,IAAV,CAAeT,GAAG,CAACE,IAAJ,CAASQ,IAAxB,CAAjB,CAAhB;AACH;;AAED,QAAMhB,SAAS,EAAf;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAGI;;AACAD,EAAAA,YAAY,CAACqB,UAAb,CACI;AAAEC,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GADJ,EAEI;AAAED,IAAAA,MAAM,EAAE,UAAV;AAAsBT,IAAAA,WAAW,EAAEA,WAAnC;AAAgDW,IAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL;AAA1D,GAFJ,EAIKC,IAJL,CAIU,MAAM;AACR,WAAO3B,YAAY,CAAC4B,IAAb,CAAkB;AACrBX,MAAAA,IAAI,EAAEV,GAAG,CAACE,IAAJ,CAASQ,IADM;AAErBK,MAAAA,MAAM,EAAE;AAFa,KAAlB,EAGJO,QAHI,CAGK,MAHL,CAAP;AAIH,GATL,EAUKF,IAVL,CAUWG,WAAD,IAAiB;AACnBtB,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,CAAqB;AAAEC,MAAAA,IAAI,EAAEF;AAAR,KAArB;AACAtB,IAAAA,GAAG,CAACyB,GAAJ;AACH,GAbL,EAcKC,KAdL,CAcYC,GAAD,IAAS;AACZ3B,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,CAAqB;AAAEK,MAAAA,KAAK,EAAED;AAAT,KAArB;AACA3B,IAAAA,GAAG,CAACyB,GAAJ;AACH,GAjBL;AAkBH","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport validator from 'validator';\nexport const config = {\n    api: {\n        externalResolver: true,\n    },\n};\n\nexport default async function handler(req, res) {\n    req.body = JSON.parse(req.body);\n    var chkarray;\n    var ordernumber;\n    var validateduser;\n\n    if (validator.isEmpty(validator.trim(req.body.user))) {\n        errors.push(' The user is empty');\n    } else {\n        validateduser = validator.escape(validator.trim(req.body.user));\n    }\n\n    await dbConnect();\n\n    /* await ItemInstance.find({ status: 'Cart', check: true })\n        .then((result) => {\n            if (result) {\n                result.map((ins) => {\n                    chkarray.push(ins._id);\n                });\n            } else {\n                console.log('checked instances is zero');\n                res.status(500).json({ error: 'checked instances is zero' });\n                res.end();\n            }\n        })\n        .catch((err) => {\n            res.status(500).json({ error: err });\n            res.end();\n        });*/\n\n    /* ordernumber = Math.floor(new Date().valueOf() + Math.random());\n    var order = new Order({\n        ordernumber: ordernumber,\n        itemInstances: chkarray,\n        user: validatduser,\n        buy_date: Date.now(),\n    });\n\n    order.save().then();*/\n\n    // first write to order document?\n    ItemInstance.updateMany(\n        { status: 'Cart', check: true },\n        { status: 'Checkout', ordernumber: ordernumber, buy_date: Date.now() }\n    )\n        .then(() => {\n            return ItemInstance.find({\n                user: req.body.user,\n                status: 'Cart',\n            }).populate('item');\n        })\n        .then((items_carts) => {\n            res.status(201).json({ data: items_carts });\n            res.end();\n        })\n        .catch((err) => {\n            res.status(500).json({ error: err });\n            res.end();\n        });\n}\n"]},"metadata":{},"sourceType":"module"}