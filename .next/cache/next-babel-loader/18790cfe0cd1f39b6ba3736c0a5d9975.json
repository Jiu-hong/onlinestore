{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true\n  }\n};\nexport default async function handler(req, res) {\n  req.body = JSON.parse(req.body);\n  console.log('req.body: ', req.body);\n  var errors = [];\n  var validatedinsid;\n  await dbConnect();\n\n  if (validator.isEmpty(validator.trim(req.body.insid))) {\n    errors.push(' The insid is empty');\n  } else {\n    validatedinsid = validator.escape(validator.trim(req.body.insid));\n  }\n\n  if (errors.length > 0) {\n    res.status(500).json({\n      error: errors,\n      status: 500\n    });\n    res.end();\n    return;\n  }\n\n  ItemInstance.findByIdAndUpdate(validatedinsid, {\n    check: req.body.check,\n    buy_date: Date.now()\n  }).populate('item').then(newins => {\n    console.log('newins: ', newins);\n    res.status(201).json({\n      status: 201,\n      data: newins\n    });\n    res.end();\n  }).catch(err => {\n    res.status(500).json({\n      status: 500,\n      error: err\n    });\n    res.end();\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_chkchg_post.js"],"names":["ItemInstance","dbConnect","validator","config","api","externalResolver","handler","req","res","body","JSON","parse","console","log","errors","validatedinsid","isEmpty","trim","insid","push","escape","length","status","json","error","end","findByIdAndUpdate","check","buy_date","Date","now","populate","then","newins","data","catch","err"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE;AADjB;AADa,CAAf;AAMP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5CD,EAAAA,GAAG,CAACE,IAAJ,GAAWC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACE,IAAf,CAAX;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,GAAG,CAACE,IAA9B;AACA,MAAIK,MAAM,GAAG,EAAb;AACA,MAAIC,cAAJ;AACA,QAAMd,SAAS,EAAf;;AAEA,MAAIC,SAAS,CAACc,OAAV,CAAkBd,SAAS,CAACe,IAAV,CAAeV,GAAG,CAACE,IAAJ,CAASS,KAAxB,CAAlB,CAAJ,EAAuD;AACnDJ,IAAAA,MAAM,CAACK,IAAP,CAAY,qBAAZ;AACH,GAFD,MAEO;AACHJ,IAAAA,cAAc,GAAGb,SAAS,CAACkB,MAAV,CAAiBlB,SAAS,CAACe,IAAV,CAAeV,GAAG,CAACE,IAAJ,CAASS,KAAxB,CAAjB,CAAjB;AACH;;AAED,MAAIJ,MAAM,CAACO,MAAP,GAAgB,CAApB,EAAuB;AACnBb,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAEV,MAAT;AAAiBQ,MAAAA,MAAM,EAAE;AAAzB,KAArB;AACAd,IAAAA,GAAG,CAACiB,GAAJ;AACA;AACH;;AAEDzB,EAAAA,YAAY,CAAC0B,iBAAb,CAA+BX,cAA/B,EAA+C;AAC3CY,IAAAA,KAAK,EAAEpB,GAAG,CAACE,IAAJ,CAASkB,KAD2B;AAE3CC,IAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL;AAFiC,GAA/C,EAIKC,QAJL,CAIc,MAJd,EAKKC,IALL,CAKWC,MAAD,IAAY;AACdrB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBoB,MAAxB;AACAzB,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeY,MAAAA,IAAI,EAAED;AAArB,KAArB;AACAzB,IAAAA,GAAG,CAACiB,GAAJ;AACH,GATL,EAUKU,KAVL,CAUYC,GAAD,IAAS;AACZ5B,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,KAAK,EAAEY;AAAtB,KAArB;AACA5B,IAAAA,GAAG,CAACiB,GAAJ;AACH,GAbL;AAcH","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n    },\n};\n\nexport default async function handler(req, res) {\n    req.body = JSON.parse(req.body);\n    console.log('req.body: ', req.body);\n    var errors = [];\n    var validatedinsid;\n    await dbConnect();\n\n    if (validator.isEmpty(validator.trim(req.body.insid))) {\n        errors.push(' The insid is empty');\n    } else {\n        validatedinsid = validator.escape(validator.trim(req.body.insid));\n    }\n\n    if (errors.length > 0) {\n        res.status(500).json({ error: errors, status: 500 });\n        res.end();\n        return;\n    }\n\n    ItemInstance.findByIdAndUpdate(validatedinsid, {\n        check: req.body.check,\n        buy_date: Date.now(),\n    })\n        .populate('item')\n        .then((newins) => {\n            console.log('newins: ', newins);\n            res.status(201).json({ status: 201, data: newins });\n            res.end();\n        })\n        .catch((err) => {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        });\n}\n"]},"metadata":{},"sourceType":"module"}