{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/_app.js\";\nimport '../styles/globals.css';\nimport Item from '../models/Item';\nimport dbConnect from '../utils/dbConnect';\nimport App from 'next/app';\n\nfunction MyApp({\n  Component,\n  items\n}) {\n  console.log('items: ', items);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Component, {\n        items: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n\n/*\nMyApp.getInitialProps = async (appContext) => {\n  //calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n\n  await dbConnect();\n\n  /* find all the data in our database \n  const result = await Item.find({});\n  const items = JSON.parse(JSON.stringify(result));\n\n  return { appProps, items };\n};\n/*\nexport async function getStaticProps() {\n  //export async function getServerSideProps() {\n  await dbConnect();\n\n  /* find all the data in our database \n  const result = await Item.find({});\n  const items = JSON.parse(JSON.stringify(result));\n\n  return { props: { pageProps: items } };\n}\n*/\n\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/_app.js"],"names":["Item","dbConnect","App","MyApp","Component","items","console","log"],"mappings":";;;AAAA,OAAO,uBAAP;AACA,OAAOA,IAAP,MAAiB,gBAAjB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,GAAP,MAAgB,UAAhB;;AACA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAqC;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB;AACA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,KAAK,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAOD,C,CAED;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeF,KAAf","sourcesContent":["import '../styles/globals.css';\nimport Item from '../models/Item';\nimport dbConnect from '../utils/dbConnect';\nimport App from 'next/app';\nfunction MyApp({ Component, items }) {\n  console.log('items: ', items);\n  return (\n    <>\n      <div className='grid wrapper'>\n        <Component items={items} />\n      </div>\n    </>\n  );\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n/*\nMyApp.getInitialProps = async (appContext) => {\n  //calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n\n  await dbConnect();\n\n  /* find all the data in our database \n  const result = await Item.find({});\n  const items = JSON.parse(JSON.stringify(result));\n\n  return { appProps, items };\n};\n/*\nexport async function getStaticProps() {\n  //export async function getServerSideProps() {\n  await dbConnect();\n\n  /* find all the data in our database \n  const result = await Item.find({});\n  const items = JSON.parse(JSON.stringify(result));\n\n  return { props: { pageProps: items } };\n}\n*/\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}