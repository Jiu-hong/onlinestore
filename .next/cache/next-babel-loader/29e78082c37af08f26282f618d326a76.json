{"ast":null,"code":"import User1 from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\nimport formidable from 'formidable';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\n\nconst getHashedPassword = password => {\n  console.log('password: ', password);\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(password).digest('base64');\n  return hash;\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  }); // console.log('req.body: ', req.body);\n\n  var validatedusername, validatedemail, validatedpassword;\n  var errors = [];\n  await dbConnect();\n  form.parse(req, (err, fields, files) => {\n    console.log('I am in form parse');\n\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    } // validator text\n\n\n    if (validator.isEmpty(validator.trim(fields.username))) {\n      errors.push(' The username is empty');\n    } else {\n      validatedusername = validator.escape(validator.trim(fields.username));\n    }\n\n    if (validator.isEmpty(validator.trim(fields.email))) {\n      errors.push(' The email is empty');\n    } else {\n      if (validator.isEmail(validator.trim(fields.email))) {\n        validatedemail = validator.escape(validator.trim(fields.email));\n      } else {\n        errors.push('The email format is incorrect');\n      }\n    }\n\n    if (validator.isEmpty(validator.trim(fields.password))) {\n      errors.push(' The password is empty');\n    } else {\n      if (validator.isLength(validator.trim(fields.password), {\n        min: 6\n      })) {\n        validatedpassword = validator.escape(validator.trim(fields.password));\n      } else {\n        console.log('I am less than 6');\n        errors.push(' The password must be at least 6 charactors.');\n      }\n    }\n\n    if (validator.trim(fields.confirmPassword) !== validator.trim(fields.password)) {\n      errors.push('Password confirmation does not match password.');\n    }\n  });\n  await User1.findOne({\n    email: validatedemail\n  }).then(user => {\n    console.log('the same user');\n    if (user) errors.push('Email already in use');\n  });\n\n  if (errors.length > 0) {\n    console.log(' I am here');\n    res.status(500).json({\n      error: errors,\n      status: 500\n    });\n    res.end();\n    return;\n  }\n\n  const hashedPassword = getHashedPassword(validatedpassword);\n  var user = new User1({\n    username: validatedusername,\n    email: validatedemail,\n    password: hashedPassword\n  });\n  user.save(function (err, user) {\n    if (err) {\n      res.status(500).json({\n        status: 500,\n        error: err\n      });\n      res.end();\n    } else {\n      console.log('user: ', user); // Successful - redirect to login.\n\n      res.status(201).json({\n        status: 201,\n        data: user\n      });\n      res.end();\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_register_post.js"],"names":["User1","dbConnect","crypto","formidable","validator","config","api","externalResolver","bodyParser","getHashedPassword","password","console","log","sha256","createHash","hash","update","digest","handler","req","res","form","multiples","validatedusername","validatedemail","validatedpassword","errors","parse","err","fields","files","json","isEmpty","trim","username","push","escape","email","isEmail","isLength","min","confirmPassword","findOne","then","user","length","status","error","end","hashedPassword","save","data"],"mappings":"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","sourcesContent":["import User1 from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\n\nimport formidable from 'formidable';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nconst getHashedPassword = (password) => {\n    console.log('password: ', password);\n    const sha256 = crypto.createHash('sha256');\n    const hash = sha256.update(password).digest('base64');\n    return hash;\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    // console.log('req.body: ', req.body);\n    var validatedusername, validatedemail, validatedpassword;\n    var errors = [];\n    await dbConnect();\n\n    form.parse(req, (err, fields, files) => {\n        console.log('I am in form parse');\n        if (err) {\n            console.log('err: ', err);\n            res.json(err);\n            return;\n        }\n\n        // validator text\n        if (validator.isEmpty(validator.trim(fields.username))) {\n            errors.push(' The username is empty');\n        } else {\n            validatedusername = validator.escape(\n                validator.trim(fields.username)\n            );\n        }\n\n        if (validator.isEmpty(validator.trim(fields.email))) {\n            errors.push(' The email is empty');\n        } else {\n            if (validator.isEmail(validator.trim(fields.email))) {\n                validatedemail = validator.escape(validator.trim(fields.email));\n            } else {\n                errors.push('The email format is incorrect');\n            }\n        }\n\n        if (validator.isEmpty(validator.trim(fields.password))) {\n            errors.push(' The password is empty');\n        } else {\n            if (\n                validator.isLength(validator.trim(fields.password), { min: 6 })\n            ) {\n                validatedpassword = validator.escape(\n                    validator.trim(fields.password)\n                );\n            } else {\n                console.log('I am less than 6');\n                errors.push(' The password must be at least 6 charactors.');\n            }\n        }\n\n        if (\n            validator.trim(fields.confirmPassword) !==\n            validator.trim(fields.password)\n        ) {\n            errors.push('Password confirmation does not match password.');\n        }\n    });\n\n    await User1.findOne({ email: validatedemail }).then((user) => {\n        console.log('the same user');\n        if (user) errors.push('Email already in use');\n    });\n\n    if (errors.length > 0) {\n        console.log(' I am here');\n        res.status(500).json({ error: errors, status: 500 });\n        res.end();\n        return;\n    }\n\n    const hashedPassword = getHashedPassword(validatedpassword);\n    var user = new User1({\n        username: validatedusername,\n        email: validatedemail,\n        password: hashedPassword,\n    });\n\n    user.save(function (err, user) {\n        if (err) {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        } else {\n            console.log('user: ', user);\n            // Successful - redirect to login.\n            res.status(201).json({ status: 201, data: user });\n            res.end();\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}