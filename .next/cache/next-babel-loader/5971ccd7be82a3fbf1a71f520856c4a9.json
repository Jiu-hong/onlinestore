{"ast":null,"code":"import User from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\nimport formidable from 'formidable';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\n\nconst getHashedPassword = password => {\n  console.log('password: ', password);\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(password).digest('base64');\n  return hash;\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  }); // console.log('req.body: ', req.body);\n\n  var validatedusername, email, validatedemail, password, validatedpassword;\n  var errors = [];\n  await dbConnect();\n  form.parse(req, (err, fields, files) => {\n    console.log('I am in form parse');\n\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    } // validator text\n\n\n    if (validator.isEmpty(validator.trim(fields.username))) {\n      errors.push(' The username is empty');\n    } else {\n      validatedusername = validator.escape(validator.trim(fields.username));\n    }\n\n    if (validator.isEmpty(validator.trim(fields.email))) {\n      errors.push(' The email is empty');\n    } else {\n      if (validator.isEmail(validator.trim(fields.email))) {\n        validatedemail = validator.escape(validator.trim(fields.email));\n      } else {\n        errors.push(' The email format is incorrect');\n      }\n    }\n\n    if (validator.isEmpty(validator.trim(fields.password))) {\n      errors.push(' The password is empty');\n    } else {\n      if (validator.isLength(validator.trim(fields.password), {\n        min: 6\n      })) {\n        validatedpassword = validator.escape(validator.trim(fields.password));\n      } else {\n        console.log('I am less than 6');\n        errors.push('The password must be at least 6 charactors.');\n      }\n    }\n\n    if (errors.length > 0) {\n      console.log(' I am here');\n      res.status(500).json({\n        error: errors,\n        status: 500\n      });\n      res.end();\n      return;\n    }\n\n    console.log('validatedpassword: ', validatedpassword);\n    const hashedPassword = getHashedPassword(validatedpassword);\n    User.findOne({\n      email: validatedemail,\n      password: hashedPassword\n    }).then(user => {\n      if (!user) {\n        errors.push('Invalid username or password');\n        res.status(404).json({\n          status: 404,\n          error: errors\n        });\n        res.end();\n      } else {\n        res.status(201).json({\n          status: 201,\n          data: user\n        });\n        res.end();\n      }\n    }).catch(err => {\n      res.status(500).json({\n        status: 500,\n        error: err\n      });\n      res.end();\n    });\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_logon_post.js"],"names":["User","dbConnect","crypto","formidable","validator","config","api","externalResolver","bodyParser","getHashedPassword","password","console","log","sha256","createHash","hash","update","digest","handler","req","res","form","multiples","validatedusername","email","validatedemail","validatedpassword","errors","parse","err","fields","files","json","isEmpty","trim","username","push","escape","isEmail","isLength","min","length","status","error","end","hashedPassword","findOne","then","user","data","catch"],"mappings":"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","sourcesContent":["import User from '../../models/user';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\n\nimport formidable from 'formidable';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nconst getHashedPassword = (password) => {\n    console.log('password: ', password);\n    const sha256 = crypto.createHash('sha256');\n    const hash = sha256.update(password).digest('base64');\n    return hash;\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    // console.log('req.body: ', req.body);\n    var validatedusername, email, validatedemail, password, validatedpassword;\n    var errors = [];\n    await dbConnect();\n\n    form.parse(req, (err, fields, files) => {\n        console.log('I am in form parse');\n        if (err) {\n            console.log('err: ', err);\n            res.json(err);\n            return;\n        }\n\n        // validator text\n        if (validator.isEmpty(validator.trim(fields.username))) {\n            errors.push(' The username is empty');\n        } else {\n            validatedusername = validator.escape(\n                validator.trim(fields.username)\n            );\n        }\n\n        if (validator.isEmpty(validator.trim(fields.email))) {\n            errors.push(' The email is empty');\n        } else {\n            if (validator.isEmail(validator.trim(fields.email))) {\n                validatedemail = validator.escape(validator.trim(fields.email));\n            } else {\n                errors.push(' The email format is incorrect');\n            }\n        }\n\n        if (validator.isEmpty(validator.trim(fields.password))) {\n            errors.push(' The password is empty');\n        } else {\n            if (\n                validator.isLength(validator.trim(fields.password), { min: 6 })\n            ) {\n                validatedpassword = validator.escape(\n                    validator.trim(fields.password)\n                );\n            } else {\n                console.log('I am less than 6');\n                errors.push('The password must be at least 6 charactors.');\n            }\n        }\n\n        if (errors.length > 0) {\n            console.log(' I am here');\n            res.status(500).json({ error: errors, status: 500 });\n            res.end();\n            return;\n        }\n\n        console.log('validatedpassword: ', validatedpassword);\n        const hashedPassword = getHashedPassword(validatedpassword);\n        User.findOne({ email: validatedemail, password: hashedPassword })\n            .then((user) => {\n                if (!user) {\n                    errors.push('Invalid username or password');\n                    res.status(404).json({ status: 404, error: errors });\n                    res.end();\n                } else {\n                    res.status(201).json({ status: 201, data: user });\n                    res.end();\n                }\n            })\n            .catch((err) => {\n                res.status(500).json({ status: 500, error: err });\n                res.end();\n            });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}