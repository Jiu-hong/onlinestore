{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/* This is a database connection function*/\nimport mongoose from 'mongoose';\nmongoose.set('returnOriginal', false);\nvar connection = {};\n/* creating connection object*/\n\nfunction dbConnect() {\n  return _dbConnect.apply(this, arguments);\n}\n\nfunction _dbConnect() {\n  _dbConnect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var db;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!connection.isConnected) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.next = 4;\n            return mongoose.connect(process.env.MONGODB_URI, {\n              useNewUrlParser: true,\n              useUnifiedTopology: true,\n              useFindAndModify: false\n            });\n\n          case 4:\n            db = _context.sent;\n            connection.isConnected = db.connections[0].readyState;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _dbConnect.apply(this, arguments);\n}\n\nexport default dbConnect;","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/utils/dbConnect.js"],"names":["mongoose","set","connection","dbConnect","isConnected","connect","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","useFindAndModify","db","connections","readyState"],"mappings":";;;;AAAA;AACA,OAAOA,QAAP,MAAqB,UAArB;AACAA,QAAQ,CAACC,GAAT,CAAa,gBAAb,EAA+B,KAA/B;AAEA,IAAMC,UAAU,GAAG,EAAnB;AAAuB;;SAERC,S;;;;;uEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEQD,UAAU,CAACE,WAFnB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAOqBJ,QAAQ,CAACK,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,WAA7B,EAA0C;AACvDC,cAAAA,eAAe,EAAE,IADsC;AAEvDC,cAAAA,kBAAkB,EAAE,IAFmC;AAGvDC,cAAAA,gBAAgB,EAAE;AAHqC,aAA1C,CAPrB;;AAAA;AAOUC,YAAAA,EAPV;AAaIV,YAAAA,UAAU,CAACE,WAAX,GAAyBQ,EAAE,CAACC,WAAH,CAAe,CAAf,EAAkBC,UAA3C;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBA,eAAeX,SAAf","sourcesContent":["/* This is a database connection function*/\nimport mongoose from 'mongoose';\nmongoose.set('returnOriginal', false);\n\nconst connection = {}; /* creating connection object*/\n\nasync function dbConnect() {\n    /* check if we have connection to our databse*/\n    if (connection.isConnected) {\n        return;\n    }\n\n    /* connecting to our database */\n    const db = await mongoose.connect(process.env.MONGODB_URI, {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useFindAndModify: false,\n    });\n\n    connection.isConnected = db.connections[0].readyState;\n}\n\nexport default dbConnect;\n"]},"metadata":{},"sourceType":"module"}