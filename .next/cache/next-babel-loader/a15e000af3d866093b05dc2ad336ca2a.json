{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\nimport formidable from 'formidable';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\n\nconst getHashedPassword = password => {\n  console.log('password: ', password);\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(password).digest('base64');\n  return hash;\n};\n\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  }); // console.log('req.body: ', req.body);\n\n  var email, validatedemail, password, validatedpassword;\n  var errors = [];\n  await dbConnect();\n  form.parse(req, (err, fields, files) => {\n    console.log('I am in form parse');\n\n    if (err) {\n      console.log('err: ', err);\n      res.json(err);\n      return;\n    } // validator text\n\n\n    if (validator.isEmpty(validator.trim(fields.email))) {\n      errors.push(' The email is empty');\n    }\n    /*{\n      if (validator.isEmail(validator.trim(fields.email))) {\n          validatedemail = validator.escape(validator.trim(fields.email));\n      } else {\n          errors.push(' The email format is incorrect');\n      }\n    }*/\n    else {\n        validatedemail = validator.escape(validator.trim(fields.email));\n      }\n\n    if (validator.isEmpty(validator.trim(fields.password))) {\n      errors.push(' The password is empty');\n    } else {\n      if (validator.isLength(validator.trim(fields.password), {\n        min: 6\n      })) {\n        validatedpassword = validator.escape(validator.trim(fields.password));\n      } else {\n        console.log('I am less than 6');\n        errors.push(' The password must be at least 6 charactors.');\n      }\n    }\n\n    if (errors.length > 0) {\n      console.log(' I am here');\n      res.status(500).json({\n        error: errors,\n        status: 500\n      });\n      res.end();\n      return;\n    }\n\n    return;\n  });\n  const hashedPassword = getHashedPassword(validatedpassword);\n  User.findOne({\n    email: validatedemail,\n    password: hashedPassword\n  }).then(user => {\n    if (!user) {\n      var err = new Error('Invalid username or password');\n      res.status(404).json({\n        status: 404,\n        error: err\n      });\n      res.end();\n    } else {\n      res.status(201).json({\n        status: 201,\n        data: user\n      });\n      res.end();\n    }\n  }).catch(err => {\n    res.status(500).json({\n      status: 500,\n      error: err\n    });\n    res.end();\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_logon_post.js"],"names":["ItemInstance","dbConnect","crypto","formidable","validator","config","api","externalResolver","bodyParser","getHashedPassword","password","console","log","sha256","createHash","hash","update","digest","handler","req","res","form","multiples","email","validatedemail","validatedpassword","errors","parse","err","fields","files","json","isEmpty","trim","push","escape","isLength","min","length","status","error","end","hashedPassword","User","findOne","then","user","Error","data","catch"],"mappings":"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","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport crypto from 'crypto';\n\nimport formidable from 'formidable';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nconst getHashedPassword = (password) => {\n    console.log('password: ', password);\n    const sha256 = crypto.createHash('sha256');\n    const hash = sha256.update(password).digest('base64');\n    return hash;\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n    // console.log('req.body: ', req.body);\n    var email, validatedemail, password, validatedpassword;\n    var errors = [];\n    await dbConnect();\n\n    form.parse(req, (err, fields, files) => {\n        console.log('I am in form parse');\n        if (err) {\n            console.log('err: ', err);\n            res.json(err);\n            return;\n        }\n\n        // validator text\n\n        if (validator.isEmpty(validator.trim(fields.email))) {\n            errors.push(' The email is empty');\n        } /*{\n            if (validator.isEmail(validator.trim(fields.email))) {\n                validatedemail = validator.escape(validator.trim(fields.email));\n            } else {\n                errors.push(' The email format is incorrect');\n            }\n        }*/ else {\n            validatedemail = validator.escape(validator.trim(fields.email));\n        }\n\n        if (validator.isEmpty(validator.trim(fields.password))) {\n            errors.push(' The password is empty');\n        } else {\n            if (\n                validator.isLength(validator.trim(fields.password), { min: 6 })\n            ) {\n                validatedpassword = validator.escape(\n                    validator.trim(fields.password)\n                );\n            } else {\n                console.log('I am less than 6');\n                errors.push(' The password must be at least 6 charactors.');\n            }\n        }\n\n        if (errors.length > 0) {\n            console.log(' I am here');\n            res.status(500).json({ error: errors, status: 500 });\n            res.end();\n            return;\n        }\n        return;\n    });\n    const hashedPassword = getHashedPassword(validatedpassword);\n    User.findOne({ email: validatedemail, password: hashedPassword })\n        .then((user) => {\n            if (!user) {\n                var err = new Error('Invalid username or password');\n                res.status(404).json({ status: 404, error: err });\n                res.end();\n            } else {\n                res.status(201).json({ status: 201, data: user });\n                res.end();\n            }\n        })\n        .catch((err) => {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        });\n}\n"]},"metadata":{},"sourceType":"module"}