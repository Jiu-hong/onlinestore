{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\nexport default async function handler(req, res) {\n  const form = formidable({\n    multiples: true\n  });\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      res.json(err);\n      return;\n    }\n\n    console.log('files: ', files);\n    console.log('files.testfile.length: ', files.testfile.length);\n    console.log('fields:', fields);\n    var oldPath, newPath;\n\n    if (files.testfile.length) {\n      for (let i = 0; i < files.testfile.length; i++) {\n        oldPath = files.testfile[i].path;\n        newPath = 'uploadsnew/' + files.testfile[i].name;\n        fs.rename(oldPath, newPath, function (err) {\n          if (err) throw err;\n          console.log('Successfully renamed - AKA moved!');\n        });\n      }\n    } else {\n      oldPath = files.testfile.path;\n      newPath = 'uploadsnew/' + files.testfile.name;\n      fs.rename(oldPath, newPath, function (err) {\n        if (err) throw err;\n        console.log('Successfully renamed - AKA moved!');\n      });\n    }\n  });\n  /* await dbConnect();\n  ItemInstance.findByIdAndUpdate(req.body.id, { comment: req.body.comment })\n      .then((items_comment) => {\n          console.log('I am here after update comment: ', res);\n          res.status(201).json({ data: items_comment });\n          res.end();\n      })\n      .catch((err) => {\n          console.log('I am in err: ', err);\n          res.status(500).json({ error: err });\n          res.end();\n      });*/\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_comment_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","config","api","externalResolver","bodyParser","handler","req","res","form","multiples","parse","err","fields","files","json","console","log","testfile","length","oldPath","newPath","i","path","name","rename"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE,IADjB;AAEDC,IAAAA,UAAU,EAAE;AAFX;AADa,CAAf;AAOP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,QAAMC,IAAI,GAAGT,UAAU,CAAC;AAAEU,IAAAA,SAAS,EAAE;AAAb,GAAD,CAAvB;AAEAD,EAAAA,IAAI,CAACE,KAAL,CAAWJ,GAAX,EAAgB,CAACK,GAAD,EAAMC,MAAN,EAAcC,KAAd,KAAwB;AACpC,QAAIF,GAAJ,EAAS;AACLJ,MAAAA,GAAG,CAACO,IAAJ,CAASH,GAAT;AACA;AACH;;AACDI,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCH,KAAK,CAACI,QAAN,CAAeC,MAAtD;AAEAH,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,MAAvB;AAEA,QAAIO,OAAJ,EAAaC,OAAb;;AACA,QAAIP,KAAK,CAACI,QAAN,CAAeC,MAAnB,EAA2B;AACvB,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACI,QAAN,CAAeC,MAAnC,EAA2CG,CAAC,EAA5C,EAAgD;AAC5CF,QAAAA,OAAO,GAAGN,KAAK,CAACI,QAAN,CAAeI,CAAf,EAAkBC,IAA5B;AACAF,QAAAA,OAAO,GAAG,gBAAgBP,KAAK,CAACI,QAAN,CAAeI,CAAf,EAAkBE,IAA5C;AACAvB,QAAAA,EAAE,CAACwB,MAAH,CAAUL,OAAV,EAAmBC,OAAnB,EAA4B,UAAUT,GAAV,EAAe;AACvC,cAAIA,GAAJ,EAAS,MAAMA,GAAN;AACTI,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACH,SAHD;AAIH;AACJ,KATD,MASO;AACHG,MAAAA,OAAO,GAAGN,KAAK,CAACI,QAAN,CAAeK,IAAzB;AACAF,MAAAA,OAAO,GAAG,gBAAgBP,KAAK,CAACI,QAAN,CAAeM,IAAzC;AACAvB,MAAAA,EAAE,CAACwB,MAAH,CAAUL,OAAV,EAAmBC,OAAnB,EAA4B,UAAUT,GAAV,EAAe;AACvC,YAAIA,GAAJ,EAAS,MAAMA,GAAN;AACTI,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACH,OAHD;AAIH;AACJ,GA5BD;AA8BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nexport default async function handler(req, res) {\n    const form = formidable({ multiples: true });\n\n    form.parse(req, (err, fields, files) => {\n        if (err) {\n            res.json(err);\n            return;\n        }\n        console.log('files: ', files);\n        console.log('files.testfile.length: ', files.testfile.length);\n\n        console.log('fields:', fields);\n\n        var oldPath, newPath;\n        if (files.testfile.length) {\n            for (let i = 0; i < files.testfile.length; i++) {\n                oldPath = files.testfile[i].path;\n                newPath = 'uploadsnew/' + files.testfile[i].name;\n                fs.rename(oldPath, newPath, function (err) {\n                    if (err) throw err;\n                    console.log('Successfully renamed - AKA moved!');\n                });\n            }\n        } else {\n            oldPath = files.testfile.path;\n            newPath = 'uploadsnew/' + files.testfile.name;\n            fs.rename(oldPath, newPath, function (err) {\n                if (err) throw err;\n                console.log('Successfully renamed - AKA moved!');\n            });\n        }\n    });\n\n    /* await dbConnect();\n    ItemInstance.findByIdAndUpdate(req.body.id, { comment: req.body.comment })\n        .then((items_comment) => {\n            console.log('I am here after update comment: ', res);\n            res.status(201).json({ data: items_comment });\n            res.end();\n        })\n        .catch((err) => {\n            console.log('I am in err: ', err);\n            res.status(500).json({ error: err });\n            res.end();\n        });*/\n}\n"]},"metadata":{},"sourceType":"module"}