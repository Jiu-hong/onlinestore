{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/contexts/CartContext.js\";\nimport React, { createContext, useContext, useReducer, useState } from 'react';\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartContextAction = /*#__PURE__*/createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREASE':\n      return state + 1;\n\n    case 'DECREASE':\n      return state - 1;\n\n    case 'INCREASE_BY':\n      return state + action.payload;\n\n    default:\n      throw new Error(`Unknown action: ${action.type}`);\n  }\n};\n\nconst CartContextProvider = ({\n  children\n}) => {\n  //const [len, dispatch] = useReducer(reducer, 0);\n  const {\n    0: inslen,\n    1: setInsLen\n  } = useState(0);\n  const {\n    0: instances,\n    1: setInstance\n  } = useState('');\n\n  const sumItems = instances => {\n    let itemCount = instances.reduce((total, instance) => total + instance.quantity, 0);\n    let total = instances.reduce((total, instance) => total + instance.item.price * instance.quantity, 0).toFixed(2);\n    return {\n      itemCount,\n      total\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: ({\n      inslen,\n      instances\n    }, sumItems),\n    children: /*#__PURE__*/_jsxDEV(CartContextAction.Provider, {\n      value: {\n        setInsLen,\n        setInstance\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\nexport const useIns = () => useContext(CartContext);\nexport const useInsDispatch = () => useContext(CartContextAction);\nexport default CartContextProvider;","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/contexts/CartContext.js"],"names":["React","createContext","useContext","useReducer","useState","CartContext","CartContextAction","reducer","state","action","type","payload","Error","CartContextProvider","children","inslen","setInsLen","instances","setInstance","sumItems","itemCount","reduce","total","instance","quantity","item","price","toFixed","useIns","useInsDispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,EAAuDC,QAAvD,QAAuE,OAAvE;AAEA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AACP,OAAO,MAAMK,iBAAiB,gBAAGL,aAAa,EAAvC;;AAEP,MAAMM,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,UAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF,SAAK,aAAL;AACE,aAAOA,KAAK,GAAGC,MAAM,CAACE,OAAtB;;AACF;AACE,YAAM,IAAIC,KAAJ,CAAW,mBAAkBH,MAAM,CAACC,IAAK,EAAzC,CAAN;AARJ;AAUD,CAXD;;AAaA,MAAMG,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBZ,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM;AAAA,OAACa,SAAD;AAAA,OAAYC;AAAZ,MAA2Bd,QAAQ,CAAC,EAAD,CAAzC;;AAEA,QAAMe,QAAQ,GAAIF,SAAD,IAAe;AAC9B,QAAIG,SAAS,GAAGH,SAAS,CAACI,MAAV,CACd,CAACC,KAAD,EAAQC,QAAR,KAAqBD,KAAK,GAAGC,QAAQ,CAACC,QADxB,EAEd,CAFc,CAAhB;AAIA,QAAIF,KAAK,GAAGL,SAAS,CAClBI,MADS,CAER,CAACC,KAAD,EAAQC,QAAR,KAAqBD,KAAK,GAAGC,QAAQ,CAACE,IAAT,CAAcC,KAAd,GAAsBH,QAAQ,CAACC,QAFpD,EAGR,CAHQ,EAKTG,OALS,CAKD,CALC,CAAZ;AAMA,WAAO;AAAEP,MAAAA,SAAF;AAAaE,MAAAA;AAAb,KAAP;AACD,GAZD;;AAcA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,GAAG;AAAEP,MAAAA,MAAF;AAAUE,MAAAA;AAAV,OAAuBE,QAA1B,CAA3B;AAAA,2BACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,MAAA,KAAK,EAAE;AAAEH,QAAAA,SAAF;AAAaE,QAAAA;AAAb,OAAnC;AAAA,gBACGJ;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA1BD;;AA4BA,OAAO,MAAMc,MAAM,GAAG,MAAM1B,UAAU,CAACG,WAAD,CAA/B;AACP,OAAO,MAAMwB,cAAc,GAAG,MAAM3B,UAAU,CAACI,iBAAD,CAAvC;AACP,eAAeO,mBAAf","sourcesContent":["import React, { createContext, useContext, useReducer, useState } from 'react';\n\nexport const CartContext = createContext();\nexport const CartContextAction = createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREASE':\n      return state + 1;\n    case 'DECREASE':\n      return state - 1;\n    case 'INCREASE_BY':\n      return state + action.payload;\n    default:\n      throw new Error(`Unknown action: ${action.type}`);\n  }\n};\n\nconst CartContextProvider = ({ children }) => {\n  //const [len, dispatch] = useReducer(reducer, 0);\n  const [inslen, setInsLen] = useState(0);\n  const [instances, setInstance] = useState('');\n\n  const sumItems = (instances) => {\n    let itemCount = instances.reduce(\n      (total, instance) => total + instance.quantity,\n      0\n    );\n    let total = instances\n      .reduce(\n        (total, instance) => total + instance.item.price * instance.quantity,\n        0\n      )\n      .toFixed(2);\n    return { itemCount, total };\n  };\n\n  return (\n    <CartContext.Provider value={({ inslen, instances }, sumItems)}>\n      <CartContextAction.Provider value={{ setInsLen, setInstance }}>\n        {children}\n      </CartContextAction.Provider>\n    </CartContext.Provider>\n  );\n};\n\nexport const useIns = () => useContext(CartContext);\nexport const useInsDispatch = () => useContext(CartContextAction);\nexport default CartContextProvider;\n"]},"metadata":{},"sourceType":"module"}