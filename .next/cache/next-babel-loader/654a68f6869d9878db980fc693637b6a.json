{"ast":null,"code":"import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\nimport formidable from 'formidable';\nimport fs from 'fs';\nimport validator from 'validator';\nexport const config = {\n  api: {\n    externalResolver: true,\n    bodyParser: false\n  }\n};\nexport default async function handler(req, res) {\n  console.log('req.body: ', req.body);\n  return;\n  var filearray = [];\n  var text, validatedtext, insid, validatedinsid, file;\n  var errors = [];\n  await dbConnect(); // validator text\n\n  if (!validator.isLength(validator.trim(text), {\n    min: 15,\n    max: 500\n  })) {\n    errors.push(' The input length should be 15 - 500 length');\n  } else {\n    validatedtext = validator.escape(validator.trim(text));\n  }\n\n  if (validator.isEmpty(validator.trim(insid))) {\n    errors.push(' The insid is empty');\n  } else {\n    validatedinsid = validator.escape(validator.trim(insid));\n  }\n\n  if (errors.length > 0) {\n    res.status(500).json({\n      error: errors,\n      status: 500\n    });\n    res.end();\n    return;\n  }\n\n  ItemInstance.findByIdAndUpdate(validatedinsid, {\n    commenttext: validatedtext,\n    commentimage: filearray\n  }).populate('item').then(items_comment => {\n    res.status(201).json({\n      status: 201,\n      data: items_comment\n    });\n    res.end();\n  }).catch(err => {\n    res.status(500).json({\n      status: 500,\n      error: err\n    });\n    res.end();\n  });\n}","map":{"version":3,"sources":["/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/api/user_logon_post.js"],"names":["ItemInstance","dbConnect","formidable","fs","validator","config","api","externalResolver","bodyParser","handler","req","res","console","log","body","filearray","text","validatedtext","insid","validatedinsid","file","errors","isLength","trim","min","max","push","escape","isEmpty","length","status","json","error","end","findByIdAndUpdate","commenttext","commentimage","populate","then","items_comment","data","catch","err"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,gBAAgB,EAAE,IADjB;AAEDC,IAAAA,UAAU,EAAE;AAFX;AADa,CAAf;AAOP,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,GAAG,CAACI,IAA9B;AACA;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,IAAJ,EAAUC,aAAV,EAAyBC,KAAzB,EAAgCC,cAAhC,EAAgDC,IAAhD;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMpB,SAAS,EAAf,CAN4C,CAQ5C;;AAEA,MAAI,CAACG,SAAS,CAACkB,QAAV,CAAmBlB,SAAS,CAACmB,IAAV,CAAeP,IAAf,CAAnB,EAAyC;AAAEQ,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,GAAG,EAAE;AAAhB,GAAzC,CAAL,EAAsE;AAClEJ,IAAAA,MAAM,CAACK,IAAP,CAAY,6CAAZ;AACH,GAFD,MAEO;AACHT,IAAAA,aAAa,GAAGb,SAAS,CAACuB,MAAV,CAAiBvB,SAAS,CAACmB,IAAV,CAAeP,IAAf,CAAjB,CAAhB;AACH;;AAED,MAAIZ,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAACmB,IAAV,CAAeL,KAAf,CAAlB,CAAJ,EAA8C;AAC1CG,IAAAA,MAAM,CAACK,IAAP,CAAY,qBAAZ;AACH,GAFD,MAEO;AACHP,IAAAA,cAAc,GAAGf,SAAS,CAACuB,MAAV,CAAiBvB,SAAS,CAACmB,IAAV,CAAeL,KAAf,CAAjB,CAAjB;AACH;;AAED,MAAIG,MAAM,CAACQ,MAAP,GAAgB,CAApB,EAAuB;AACnBlB,IAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAEX,MAAT;AAAiBS,MAAAA,MAAM,EAAE;AAAzB,KAArB;AACAnB,IAAAA,GAAG,CAACsB,GAAJ;AACA;AACH;;AAEDjC,EAAAA,YAAY,CAACkC,iBAAb,CAA+Bf,cAA/B,EAA+C;AAC3CgB,IAAAA,WAAW,EAAElB,aAD8B;AAE3CmB,IAAAA,YAAY,EAAErB;AAF6B,GAA/C,EAIKsB,QAJL,CAIc,MAJd,EAKKC,IALL,CAKWC,aAAD,IAAmB;AACrB5B,IAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeU,MAAAA,IAAI,EAAED;AAArB,KAArB;AACA5B,IAAAA,GAAG,CAACsB,GAAJ;AACH,GARL,EASKQ,KATL,CASYC,GAAD,IAAS;AACZ/B,IAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,KAAK,EAAEU;AAAtB,KAArB;AACA/B,IAAAA,GAAG,CAACsB,GAAJ;AACH,GAZL;AAaH","sourcesContent":["import ItemInstance from '../../models/iteminstance';\nimport dbConnect from '../../utils/dbConnect';\n\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nimport validator from 'validator';\n\nexport const config = {\n    api: {\n        externalResolver: true,\n        bodyParser: false,\n    },\n};\n\nexport default async function handler(req, res) {\n    console.log('req.body: ', req.body);\n    return;\n    var filearray = [];\n    var text, validatedtext, insid, validatedinsid, file;\n    var errors = [];\n    await dbConnect();\n\n    // validator text\n\n    if (!validator.isLength(validator.trim(text), { min: 15, max: 500 })) {\n        errors.push(' The input length should be 15 - 500 length');\n    } else {\n        validatedtext = validator.escape(validator.trim(text));\n    }\n\n    if (validator.isEmpty(validator.trim(insid))) {\n        errors.push(' The insid is empty');\n    } else {\n        validatedinsid = validator.escape(validator.trim(insid));\n    }\n\n    if (errors.length > 0) {\n        res.status(500).json({ error: errors, status: 500 });\n        res.end();\n        return;\n    }\n\n    ItemInstance.findByIdAndUpdate(validatedinsid, {\n        commenttext: validatedtext,\n        commentimage: filearray,\n    })\n        .populate('item')\n        .then((items_comment) => {\n            res.status(201).json({ status: 201, data: items_comment });\n            res.end();\n        })\n        .catch((err) => {\n            res.status(500).json({ status: 500, error: err });\n            res.end();\n        });\n}\n"]},"metadata":{},"sourceType":"module"}