webpackHotUpdate_N_E("pages/index",{

/***/ "./pages/contexts/functionContext.js":
/*!*******************************************!*\
  !*** ./pages/contexts/functionContext.js ***!
  \*******************************************/
/*! exports provided: FunctionContext, usefunctions, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FunctionContext\", function() { return FunctionContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"usefunctions\", function() { return usefunctions; });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar _jsxFileName = \"/Users/jiuhong8201/Desktop/HTML-CSS-JS-learning/A_Real_Project/my-next/pages/contexts/functionContext.js\",\n    _this = undefined,\n    _s = $RefreshSig$();\n\n\nvar FunctionContext = /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_1__[\"createContext\"])();\n\nvar PostComment = function PostComment(formData, grouporders, fnorder, fn) {\n  return fetch('/api/user_comment_post', {\n    method: 'post',\n    body: formData\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    if (result.status === 500) {\n      fn(result.error);\n    } else {\n      var newins = result.data;\n\n      for (var i = 0; i < grouporders.length; i++) {\n        var index = grouporders[i][1].findIndex(function (oldins) {\n          return oldins._id === newins._id;\n        });\n\n        if (index > -1) {\n          grouporders[i][1].splice(index, 1, newins);\n          break;\n        }\n      }\n\n      fnorder(grouporders);\n      fn([]);\n    }\n\n    return result;\n  }) // .then((res) => fno(res))\n  [\"catch\"](function (err) {\n    return new Error(err);\n  });\n};\n\n_c = PostComment;\n\nvar GetAllOrder = function GetAllOrder(parmsuser, fno) {\n  return fetch('/api/user_order_post', {\n    method: 'post',\n    body: JSON.stringify({\n      user: parmsuser\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    return result.data;\n  }).then(function (res) {\n    return fno(res);\n  })[\"catch\"](new Error());\n};\n\n_c2 = GetAllOrder;\n\nvar checkOut = function checkOut(parmsuser, fnins, fnlen, fnc, fnt) {\n  return fetch('/api/user_chckout_post', {\n    method: 'post',\n    body: JSON.stringify({\n      user: parmsuser\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    fnins(result.data);\n\n    var reducer = function reducer(accumulator, currentValue) {\n      return accumulator + currentValue.quantity;\n    };\n\n    var inslen = result.data ? result.data.reduce(reducer, 0) : 0;\n    fnlen(inslen);\n\n    var _sumItems = sumItems(result.data),\n        itemCount = _sumItems.itemCount,\n        total = _sumItems.total;\n\n    fnc(itemCount);\n    fnt(total);\n  })[\"catch\"](new Error());\n};\n\nvar sumItems = function sumItems(instances) {\n  var itemCount, total;\n  var checkedInstances = instances.filter(function (instance) {\n    return instance.check === true;\n  });\n\n  if (checkedInstances) {\n    var _itemCount = checkedInstances.reduce(function (total, checkedInstance) {\n      return total + checkedInstance.quantity;\n    }, 0);\n\n    var _total = checkedInstances.reduce(function (total, checkedInstance) {\n      return total + checkedInstance.item.price * checkedInstance.quantity;\n    }, 0).toFixed(2);\n  } else {}\n\n  return {\n    itemCount: itemCount,\n    total: total\n  };\n};\n\nvar ChgChk = function ChgChk(parmscheck, parmsid, parmsuser, ins_cart, fnins, fnlen, fnc, fnt) {\n  return fetch('/api/user_chkchg_post', {\n    method: 'post',\n    body: JSON.stringify({\n      check: parmscheck,\n      insid: parmsid,\n      user: parmsuser\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    if (result.status === 201) {\n      console.log('result.data: ', result.data);\n      var newins = result.data;\n      var index = ins_cart.findIndex(function (oldins) {\n        return oldins._id === newins._id;\n      });\n      ins_cart.splice(index, 1, newins);\n      fnins(ins_cart);\n\n      var reducer = function reducer(accumulator, currentValue) {\n        return accumulator + currentValue.quantity;\n      };\n\n      var inslen = ins_cart ? ins_cart.reduce(reducer, 0) : 0;\n      fnlen(inslen);\n\n      var _sumItems2 = sumItems(ins_cart),\n          itemCount = _sumItems2.itemCount,\n          total = _sumItems2.total;\n\n      fnc(itemCount);\n      fnt(total);\n    } else {\n      console.log('result: ', result);\n    }\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\n\n_c3 = ChgChk;\n\nvar DeleteIns = function DeleteIns(parmsid, parmsuser, ins_cart, fnins, fnlen, fnc, fnt) {\n  return fetch('/api/user_deleteins_post', {\n    method: 'post',\n    body: JSON.stringify({\n      insid: parmsid,\n      user: parmsuser\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function () {\n    var index = ins_cart.findIndex(function (oldins) {\n      return oldins._id === parmsid;\n    });\n    ins_cart.splice(index, 1);\n    fnins(ins_cart);\n\n    var reducer = function reducer(accumulator, currentValue) {\n      return accumulator + currentValue.quantity;\n    };\n\n    var inslen = ins_cart ? ins_cart.reduce(reducer, 0) : 0;\n    fnlen(inslen);\n\n    var _sumItems3 = sumItems(ins_cart),\n        itemCount = _sumItems3.itemCount,\n        total = _sumItems3.total;\n\n    fnc(itemCount);\n    fnt(total);\n  })[\"catch\"](new Error());\n};\n\n_c4 = DeleteIns;\n\nvar ChangeAddCart = function ChangeAddCart(parmscount, parmsid, parmsuser, ins_cart, fnins, fnlen, fnc, fnt) {\n  return fetch('/api/user_changeAddcart_post', {\n    method: 'post',\n    body: JSON.stringify({\n      count: parmscount,\n      insid: parmsid,\n      user: parmsuser\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    if (result.status === 201) {\n      console.log('result.data: ', result.data);\n      var newins = result.data;\n      var index = ins_cart.findIndex(function (oldins) {\n        return oldins._id === newins._id;\n      });\n      ins_cart.splice(index, 1, newins);\n      fnins(ins_cart);\n\n      var reducer = function reducer(accumulator, currentValue) {\n        return accumulator + currentValue.quantity;\n      };\n\n      var inslen = ins_cart.reduce(reducer, 0);\n      fnlen(inslen);\n\n      var _sumItems4 = sumItems(ins_cart),\n          itemCount = _sumItems4.itemCount,\n          total = _sumItems4.total;\n\n      fnc(itemCount);\n      fnt(total);\n    } else {\n      console.log('result: ', result);\n    }\n  }) // .catch((err) => new Error(err));\n  [\"catch\"](function (err) {\n    return console.log('err in catch: ', err);\n  });\n};\n\n_c5 = ChangeAddCart;\n\nvar ChangeToCart = function ChangeToCart(parmscount, parmsid, parmsuser, ins_cart, fnins, fnlen, fnc, fnt) {\n  return fetch('/api/user_changetocart_post', {\n    method: 'post',\n    body: JSON.stringify({\n      count: parmscount,\n      insid: parmsid,\n      user: parmsuser\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    // result is newins\n    var newins = result.data;\n    var index = ins_cart.findIndex(function (oldins) {\n      return oldins._id === newins._id;\n    });\n    ins_cart.splice(index, 1, newins);\n    fnins(ins_cart);\n\n    var reducer = function reducer(accumulator, currentValue) {\n      return accumulator + currentValue.quantity;\n    };\n\n    var inslen = ins_cart.reduce(reducer, 0);\n    fnlen(inslen);\n    console.log('ins_cart in user_changetocart_post before sumItems: ', ins_cart);\n\n    var _sumItems5 = sumItems(ins_cart),\n        itemCount = _sumItems5.itemCount,\n        total = _sumItems5.total;\n\n    fnc(itemCount);\n    fnt(total);\n  })[\"catch\"](new Error());\n};\n\n_c6 = ChangeToCart;\n\nvar checkdb = function checkdb() {\n  return fetch('/api/del_carts_all').then(console.log('db operation complete'))[\"catch\"](function (err) {\n    return new Error(err);\n  });\n};\n\nvar GetAllCarts = function GetAllCarts(parmsuser, fnins, fnlen, fnc, fnt) {\n  //if (!parmsuser) return Promise.reject('no user');\n  return fetch('/api/user_getallcart_post', {\n    method: 'post',\n    body: JSON.stringify({\n      user: parmsuser\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    console.log('result.data: ', result.data);\n    var newins_cart = result.data;\n    fnins(newins_cart);\n\n    var reducer = function reducer(accumulator, currentValue) {\n      return accumulator + currentValue.quantity;\n    };\n\n    var inslen = newins_cart ? newins_cart.reduce(reducer, 0) : 0;\n    fnlen(inslen);\n\n    var _sumItems6 = sumItems(newins_cart),\n        itemCount = _sumItems6.itemCount,\n        total = _sumItems6.total;\n\n    fnc(itemCount);\n    fnt(total);\n  })[\"catch\"](new Error());\n};\n\n_c7 = GetAllCarts;\n\nvar AddToCart = function AddToCart(parmscount, parmsid, parmsuser, fnins, fnlen, fnc, fnt) {\n  return fetch('/api/user_addtocart_post', {\n    method: 'post',\n    body: JSON.stringify({\n      count: parmscount,\n      itemid: parmsid,\n      user: parmsuser\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (result) {\n    var newins_cart = result.data; // now the result is new iteminstance\n\n    fnins(newins_cart);\n\n    var reducer = function reducer(accumulator, currentValue) {\n      return accumulator + currentValue.quantity;\n    };\n\n    var inslen = newins_cart.reduce(reducer, 0);\n    fnlen(inslen);\n\n    var _sumItems7 = sumItems(newins_cart),\n        itemCount = _sumItems7.itemCount,\n        total = _sumItems7.total;\n\n    fnc(itemCount);\n    fnt(total);\n  })[\"catch\"](new Error());\n};\n\n_c8 = AddToCart;\n\nvar FunctionContextProvider = function FunctionContextProvider(_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(FunctionContext.Provider, {\n    value: {\n      GetAllCarts: GetAllCarts,\n      AddToCart: AddToCart,\n      checkdb: checkdb,\n      ChangeToCart: ChangeToCart,\n      ChangeAddCart: ChangeAddCart,\n      DeleteIns: DeleteIns,\n      ChgChk: ChgChk,\n      checkOut: checkOut,\n      GetAllOrder: GetAllOrder,\n      PostComment: PostComment\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 9\n  }, _this);\n};\n\n_c9 = FunctionContextProvider;\nvar usefunctions = function usefunctions() {\n  _s();\n\n  return Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useContext\"])(FunctionContext);\n};\n\n_s(usefunctions, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (FunctionContextProvider);\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"PostComment\");\n$RefreshReg$(_c2, \"GetAllOrder\");\n$RefreshReg$(_c3, \"ChgChk\");\n$RefreshReg$(_c4, \"DeleteIns\");\n$RefreshReg$(_c5, \"ChangeAddCart\");\n$RefreshReg$(_c6, \"ChangeToCart\");\n$RefreshReg$(_c7, \"GetAllCarts\");\n$RefreshReg$(_c8, \"AddToCart\");\n$RefreshReg$(_c9, \"FunctionContextProvider\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/contexts/functionContext.js\n");

/***/ })

})